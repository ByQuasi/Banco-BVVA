package cajeroonline;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.geom.AffineTransform;
import java.sql.*;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class Invensiones extends javax.swing.JFrame {

    /**
     * Creates new form jinvensiones
     */
    public Invensiones() {
        initComponents();
        setLocationRelativeTo(null);
        prepareUser();
        
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        riesgosasButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        juego = new javax.swing.JPanel();
        Coka = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        Imtel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        Somy = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        juego_panel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel16 = new javax.swing.JLabel();
        fijoButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        borrarButton = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        extraerButton = new javax.swing.JButton();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel5.setBackground(new java.awt.Color(102, 102, 102));
        jPanel5.setLayout(null);

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        jTextArea2.setBackground(new java.awt.Color(255, 255, 255));
        jTextArea2.setColumns(20);
        jTextArea2.setForeground(new java.awt.Color(0, 0, 0));
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setText("Invertí en el futuro con ciencia y tecnología. Accedé a las empresas más innovadoras del mercado y hacé crecer tu capital con las tendencias que están cambiando el mundo.");
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextArea2.setFocusable(false);
        jTextArea2.setRequestFocusEnabled(false);
        jScrollPane2.setViewportView(jTextArea2);

        riesgosasButton.setText("Obtener");
        riesgosasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                riesgosasButtonActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Inversiones riesgosas");
        jLabel15.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(61, 61, 61))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(riesgosasButton)
                        .addGap(94, 94, 94))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(riesgosasButton)
                .addGap(12, 12, 12))
        );

        jPanel5.add(jPanel3);
        jPanel3.setBounds(210, 230, 270, 160);

        juego.setBackground(new java.awt.Color(102, 102, 102));

        Coka.setBackground(new java.awt.Color(255, 51, 153));
        Coka.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Coka.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CokaMouseClicked(evt);
            }
        });

        jLabel12.setBackground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Coka");

        javax.swing.GroupLayout CokaLayout = new javax.swing.GroupLayout(Coka);
        Coka.setLayout(CokaLayout);
        CokaLayout.setHorizontalGroup(
            CokaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CokaLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel12)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        CokaLayout.setVerticalGroup(
            CokaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CokaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addContainerGap())
        );

        Imtel.setBackground(new java.awt.Color(153, 204, 0));
        Imtel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Imtel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ImtelMouseClicked(evt);
            }
        });

        jLabel13.setBackground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("Intelo");

        javax.swing.GroupLayout ImtelLayout = new javax.swing.GroupLayout(Imtel);
        Imtel.setLayout(ImtelLayout);
        ImtelLayout.setHorizontalGroup(
            ImtelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ImtelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel13)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        ImtelLayout.setVerticalGroup(
            ImtelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ImtelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Somy.setBackground(new java.awt.Color(255, 153, 153));
        Somy.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Somy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SomyMouseClicked(evt);
            }
        });

        jLabel14.setText("Somy");

        javax.swing.GroupLayout SomyLayout = new javax.swing.GroupLayout(Somy);
        Somy.setLayout(SomyLayout);
        SomyLayout.setHorizontalGroup(
            SomyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SomyLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel14)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        SomyLayout.setVerticalGroup(
            SomyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SomyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        juego_panel.setBackground(new java.awt.Color(204, 204, 204));
        juego_panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout juego_panelLayout = new javax.swing.GroupLayout(juego_panel);
        juego_panel.setLayout(juego_panelLayout);
        juego_panelLayout.setHorizontalGroup(
            juego_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 483, Short.MAX_VALUE)
        );
        juego_panelLayout.setVerticalGroup(
            juego_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 341, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout juegoLayout = new javax.swing.GroupLayout(juego);
        juego.setLayout(juegoLayout);
        juegoLayout.setHorizontalGroup(
            juegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(juegoLayout.createSequentialGroup()
                .addComponent(Coka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(Imtel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(Somy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 218, Short.MAX_VALUE))
            .addComponent(juego_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        juegoLayout.setVerticalGroup(
            juegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(juegoLayout.createSequentialGroup()
                .addGroup(juegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Coka, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Imtel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Somy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(juego_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.add(juego);
        juego.setBounds(490, 10, 485, 373);

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        jTextArea1.setBackground(new java.awt.Color(255, 255, 255));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(0, 0, 0));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Asegura tu futuro con nuestro Plazo Fijo y hacé crecer tu dinero de forma segura y rentable. La tranquilidad de contar con el respaldo de nuestro banco, podés invertir con confianza y obtener rendimientos garantizados. Además, gestioná tu inversión de manera rápida desde nuestra app o en cualquier sucursal.");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextArea1.setFocusable(false);
        jTextArea1.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel16.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Plazo Fijo ");
        jLabel16.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        fijoButton.setText("Obtener");
        fijoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fijoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(90, 90, 90))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(fijoButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fijoButton)
                .addContainerGap())
        );

        jPanel5.add(jPanel2);
        jPanel2.setBounds(220, 0, 254, 240);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Plazo Fijo:");

        jLabel2.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Inversiones ");
        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("No activo");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Rubro", "Porcentaje"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));

        borrarButton.setText("Borrar");
        borrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(borrarButton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(borrarButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel1);
        jPanel1.setBounds(0, 0, 204, 386);

        jTextField1.setText("jTextField1");
        jPanel5.add(jTextField1);
        jTextField1.setBounds(1000, 40, 90, 22);

        jButton3.setText("Ingresar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton3);
        jButton3.setBounds(1006, 70, 80, 23);

        jTextField2.setText("jTextField2");
        jPanel5.add(jTextField2);
        jTextField2.setBounds(1000, 100, 90, 22);

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Coka:");

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Imtel:");

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Somy:");

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("0");

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("0");

        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("0");

        extraerButton.setText("Extraer");
        extraerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extraerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel9))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(extraerButton)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extraerButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel4);
        jPanel4.setBounds(1000, 120, 84, 101);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 1090, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fijoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fijoButtonActionPerformed
        JPanel panel = new JPanel();
        JTextField text = new JTextField(20);
        JTextField text2 = new JTextField(10);
        JLabel cantidad = new JLabel("Ingrese cantidad:");
        JLabel cantidad_m = new JLabel("Ingrese meses:");

        panel.setPreferredSize(new java.awt.Dimension(300, 100));
        panel.setLayout(null);
        text.setBounds(140, 20, 150, 25);
        text2.setBounds(140, 60, 150, 25);
        cantidad.setBounds(40, 20, 150, 25);
        cantidad_m.setBounds(40, 60, 150, 25);

        panel.add(text);
        panel.add(text2);
        panel.add(cantidad);
        panel.add(cantidad_m);

        int result = JOptionPane.showConfirmDialog(null, panel, "12.5% de rendimiento!", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            if (!text2.getText().equals("") && !text.getText().equals("")) {
                int aux = Integer.parseInt(text.getText());
                int aux2 = Integer.parseInt(text2.getText());
                if (aux <= money) {
                    Connection cn = c.getConnection();
                    try {
                        PreparedStatement pst = cn.prepareStatement("insert into cobros_data values(?,?,?,?,?,?,?,?)");
                        pst.setInt(1, id_user);
                        pst.setDouble(2, aux);
                        pst.setDouble(3, (12.5 / 12) * aux2);
                        pst.setInt(4, 1);
                        pst.setInt(5, aux2);
                        pst.setInt(6, 0);
                        pst.setString(7, "0");
                        pst.setInt(8, 0);
                        pst.executeUpdate();
                        PreparedStatement ps = cn.prepareStatement("update user_data set money = money + ? where id = 1");
                        ps.setDouble(1, aux);
                        ps.executeUpdate();
                        JOptionPane.showMessageDialog(null, "Plazo Fijo con Exito");
                        jLabel4.setText("Activado");
                        fijoButton.setEnabled(false);
                        pst.close();
                        cn.close();
                    } catch (Exception e) {
                        System.out.println("Errorrrr" + e);
                    }
                }

            } else {
                JOptionPane.showMessageDialog(null, "Error en los campos");
            }

    }//GEN-LAST:event_fijoButtonActionPerformed
    }
    private void riesgosasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_riesgosasButtonActionPerformed
        Connection cn = c.getConnection();
        String[] inversiones = null;
        int[] id = null;
        int[] porc = null;
        try {
            PreparedStatement pst = cn.prepareStatement("select * from inversiones_id");
            ResultSet rs = pst.executeQuery();
            List<String> inversion = new ArrayList<>();
            List<Integer> ids = new ArrayList<>();
            List<Integer> porc2 = new ArrayList<>();
            if (rs.next()) {
                do {
                    String nombre = rs.getString("nombre");
                    int porcentaje = rs.getInt("porcentaje");
                    String rubro = rs.getString("rubro");
                    ids.add(rs.getInt("unique_id"));
                    porc2.add(porcentaje);
                    inversion.add(nombre + " " + rubro + " " + porcentaje);
                } while (rs.next());
            }
            pst.close();
            inversiones = new String[inversion.size()];
            id = new int[ids.size()];
            porc = new int[porc2.size()];
            for (int i = 0; i < inversion.size(); i++) {
                inversiones[i] = inversion.get(i);
                id[i] = ids.get(i);
                porc[i] = porc2.get(i);
            }
        } catch (Exception e) {
            System.out.println(e + "reisgosas");
        }

        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        JCheckBox[] checkBoxes = new JCheckBox[inversiones.length];
        JTextField[] textFields = new JTextField[inversiones.length];

        for (int i = 0; i < inversiones.length; i++) {
            JPanel subPanel = new JPanel();
            subPanel.setLayout(new BoxLayout(subPanel, BoxLayout.X_AXIS));
            checkBoxes[i] = new JCheckBox(inversiones[i]);
            JTextField textField = new JTextField(10);
            textFields[i] = textField;
            subPanel.add(checkBoxes[i]);
            subPanel.add(Box.createHorizontalStrut(10)); // Espaciado
            subPanel.add(new JLabel("Cantidad a invertir:"));
            subPanel.add(textField);
            panel.add(subPanel);
        }

        int result = JOptionPane.showConfirmDialog(null, panel, "Seleccione las inversiones", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            for (int i = 0; i < inversiones.length; i++) {
                if (checkBoxes[i].isSelected()) {
                    prepareUser();
                    if (Double.parseDouble(textFields[i].getText().trim()) <= money) {

                        LocalDate fechaActual = LocalDate.now();
                        Date fechaSQL = Date.valueOf(fechaActual);
                        try {
                            PreparedStatement pst = cn.prepareStatement("insert into inversiones_data values(?,?,?,?,?,?)");
                            pst.setInt(1, id_user);
                            pst.setInt(2, id[i]);
                            pst.setString(3, "0");
                            pst.setDate(4, fechaSQL);
                            pst.setDouble(5, Double.parseDouble(textFields[i].getText().trim()));
                            pst.setInt(6, porc[i]);
                            pst.executeUpdate();
                            pst.close();

                            PreparedStatement ps = cn.prepareStatement("update user_data set money = money - ? where id = ?");
                            ps.setDouble(1, Double.parseDouble(textFields[i].getText().trim()));
                            ps.setInt(2, id_user);
                            ps.executeUpdate();
                            ps.close();
                        } catch (Exception e) {
                            System.out.println(e + "riesgosas for 2");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "No alcanza la plata negro");
                    }
                }
            }
            setTable(cn);
            JOptionPane.showMessageDialog(null, "Se adhirio con exito!");
            try {
                cn.close();
            } catch (SQLException ex) {
                Logger.getLogger(Invensiones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_riesgosasButtonActionPerformed
    private void init() {
        juego_panel.removeAll();
        juego_panel.setLayout(new BorderLayout());
        juego_panel.setVisible(true);
        Coka.setBackground(new Color(204, 0, 153));
        Imtel.setBackground(new Color(153, 255, 102));
        Somy.setBackground(new Color(255, 102, 102));
        juego_panel.setPreferredSize(new Dimension(300, 200));
        market.setPreferredSize(new Dimension(300, 200));
        juego_panel.add(market);
        market.update(1);
        id_stock = 1;
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                market.update(1); // Automatically updates prices every second
                updateLabels(1);
            }
        });
        if (list != null) {
            for (Timer t : list) {
                t.stop();
            }
            list.clear();
        }
        list.add(timer);
        timer.start();

    }

    private void setTable(Connection cn) {
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        jTable1.setFillsViewportHeight(true);
        ((JComponent) jTable1.getParent()).setBackground(Color.lightGray);
        modelo.setRowCount(0);
        try {
            PreparedStatement pst = cn.prepareStatement("select inversiones_id.nombre, inversiones_id.porcentaje, inversiones_id.rubro from inversiones_id "
                    + "join inversiones_data on inversiones_id.unique_id = inversiones_data.inversiones_id "
                    + "where inversiones_data.user_id = ?");
            pst.setInt(1, id_user);
            ResultSet rs = pst.executeQuery();
            DefaultTableModel table = (DefaultTableModel) jTable1.getModel();
            if (rs.next()) {
                do {
                    table.addRow(new Object[]{rs.getString("nombre"), rs.getInt("porcentaje"), rs.getString("rubro")});
                } while (rs.next());
                borrarButton.setEnabled(true);
            } else {
                table.addRow(new Object[]{"no", "posee", "inversiones"});
                borrarButton.setEnabled(false);
            }
            rs.close();
            pst.close();
        } catch (Exception e) {
        }
    }

    private void CokaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CokaMouseClicked
        juego_panel.removeAll();
        Coka.setBackground(new Color(204, 0, 153));
        Imtel.setBackground(new Color(153, 255, 102));
        Somy.setBackground(new Color(255, 102, 102));
        juego_panel.setLayout(new BorderLayout());
        juego_panel.setVisible(true);
        juego_panel.setPreferredSize(new Dimension(300, 200));
        market.setPreferredSize(new Dimension(300, 200));
        juego_panel.add(market);
        market.update(1);
        updateLabels(1);
        id_stock = 1;
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                market.update(1); 
                updateLabels(1);
            }
        });
        if (list != null) {
            for (Timer t : list) {
                t.stop();
            }
            list.clear();
        }
        list.add(timer);
        timer.start();

    }//GEN-LAST:event_CokaMouseClicked

    private void ImtelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImtelMouseClicked
        juego_panel.removeAll();
        Coka.setBackground(new Color(255, 51, 153));
        Imtel.setBackground(new Color(153, 204, 0));
        Somy.setBackground(new Color(255, 102, 102));
        juego_panel.setLayout(new BorderLayout());
        juego_panel.setVisible(true);
        juego_panel.setPreferredSize(new Dimension(300, 200));
        market.setPreferredSize(new Dimension(300, 200));
        juego_panel.add(market);
        market.setVisible(true);
        market.update(2);
        updateLabels(2);
        id_stock = 2;
        Timer timer = new Timer(10000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                market.update(2); 
                updateLabels(2);
            }
        });
        if (list != null) {
            for (Timer t : list) {
                t.stop();
            }
            list.clear();
        }
        list.add(timer);
        timer.start();

    }//GEN-LAST:event_ImtelMouseClicked

    private void SomyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SomyMouseClicked
        juego_panel.removeAll();
        Coka.setBackground(new Color(255, 51, 153));
        Imtel.setBackground(new Color(153, 255, 102));
        Somy.setBackground(new Color(255, 51, 51));
        juego_panel.setVisible(true);
        juego_panel.setLayout(new BorderLayout());
        juego_panel.setPreferredSize(new Dimension(300, 200));
        juego_panel.add(market);
        market.setVisible(true);
        market.setPreferredSize(new Dimension(300, 200));
        market.update(3);
        updateLabels(3);
        id_stock = 3;
        Timer timer = new Timer(10000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                market.update(3); 
                updateLabels(3);
            }
        });
        if (list != null) {
            for (Timer t : list) {
                t.stop();
            }
            list.clear();
        }
        list.add(timer);
        timer.start();
    }//GEN-LAST:event_SomyMouseClicked

    private void borrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarButtonActionPerformed
        Connection cn = c.getConnection();
        String[] inversiones = null;
        int[] id = null;
        int[] pro = null;
        Date[] date = null;
        double[] cant = null;
        try {
            PreparedStatement pst = cn.prepareStatement("select inversiones_id.nombre, inversiones_id.rubro, inversiones_data.unique_id, inversiones_data.porcentaje,inversiones_data.date, inversiones_data.cantidad from inversiones_id "
                    + "join inversiones_data on inversiones_id.unique_id = inversiones_data.inversiones_id "
                    + "where inversiones_data.user_id = ?");
            pst.setInt(1, id_user);
            ResultSet rs = pst.executeQuery();
            List<String> inversion = new ArrayList<>();
            List<Integer> ids = new ArrayList<>();
            List<Integer> pro2 = new ArrayList<>();
            List<Date> dates = new ArrayList<>();
            List<Double> canti = new ArrayList<>();
            if (rs.next()) {
                do {
                    String nombre = rs.getString("nombre");
                    int porcentaje = rs.getInt("porcentaje");
                    String rubro = rs.getString("rubro");
                    double cantidad2 = rs.getDouble("cantidad");
                    Date dates2 = rs.getDate("date");
                    ids.add(rs.getInt("unique_id"));
                    pro2.add(porcentaje);
                    dates.add(dates2);
                    canti.add(cantidad2);
                    inversion.add(rubro + " " + porcentaje + " " + nombre);
                } while (rs.next());

                inversiones = new String[inversion.size()];
                id = new int[ids.size()];
                pro = new int[pro2.size()];
                date = new Date[dates.size()];
                cant = new double[canti.size()];
                for (int i = 0; i < inversion.size(); i++) {
                    inversiones[i] = inversion.get(i);
                    id[i] = ids.get(i);
                    pro[i] = pro2.get(i);
                    date[i] = dates.get(i);
                    cant[i] = canti.get(i);
                }
            }

            rs.close();
            pst.close();

        } catch (Exception e) {
            System.out.println(e + "borrar");
        }

        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        JCheckBox[] checkBoxes = new JCheckBox[inversiones.length];

        for (int i = 0; i < inversiones.length; i++) {
            checkBoxes[i] = new JCheckBox(inversiones[i]);
            panel.add(checkBoxes[i]);
        }

        int result = JOptionPane.showConfirmDialog(null, panel, "Seleccione las inversiones", JOptionPane.OK_CANCEL_OPTION);
        int aux = 0;
        for (int i = 0; i < checkBoxes.length; i++) {
            if (!checkBoxes[i].isSelected()) {
                aux++;
            }
        }
        if (aux == checkBoxes.length) {
            JOptionPane.showMessageDialog(null, "No seleccionaste nada");
            return;
        }
        if (result == JOptionPane.OK_OPTION) {
            boolean flag = false;
            for (int i = 0; i < inversiones.length; i++) {
                if (checkBoxes[i].isSelected()) {
                    setVenta(date[i].toLocalDate(), LocalDate.now(), pro[i], cant[i]);
                    try {
                        PreparedStatement pst = cn.prepareStatement("delete from inversiones_data where unique_id = ?");
                        pst.setInt(1, id[i]);
                        pst.executeUpdate();
                        pst.close();
                    } catch (Exception e) {
                        System.out.println(e + " IGGATRON");
                    }
                }
            }
            setTable(cn);
            JOptionPane.showMessageDialog(null, "Se vendio con exito!");
            try {
                cn.close();
            } catch (SQLException ex) {
                Logger.getLogger(Invensiones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_borrarButtonActionPerformed
    private void setVenta(LocalDate date, LocalDate date2, double porcentaje, double cantidad) {
        long diasTranscurridos = ChronoUnit.DAYS.between(date, date2);
        if (diasTranscurridos > 0) {
            double aux = 1;
            if (diasTranscurridos > 6) {
                aux = Math.random();
            }
            double total = (porcentaje / 100 / 360) * diasTranscurridos * cantidad * aux + cantidad;
            Connection cn = c.getConnection();
            try {
                PreparedStatement pst = cn.prepareStatement("update user_data set money = money + ? where id = ?");
                pst.setDouble(1, total);
                pst.setInt(2, id_user);
                pst.executeUpdate();
                PreparedStatement ps = cn.prepareStatement("update user_data set money = money - ? where id = ?");
                ps.setDouble(1, total);
                ps.setInt(2, 1);
                ps.executeUpdate();
                cn.close();
            } catch (Exception e) {
                System.out.println(e + " setVenta");
            }
        }
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Connection cn = c.getConnection();
        int stock = -1;
        boolean entradaValida = false;

        while (!entradaValida) {
            try {

                String input = JOptionPane.showInputDialog(null, "¿Cuántas unidades de stock deseas?",
                        "Ingreso de Stock", JOptionPane.QUESTION_MESSAGE);

                if (input == null) {
                    JOptionPane.showMessageDialog(null, "No ingresaste ninguna cantidad de stock.");
                    return;
                }

                stock = Integer.parseInt(input);
                entradaValida = true;

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Por favor, ingresa un número entero válido.",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        prepareUser();
        if (price * stock <= money) {
            String statement;
            try {
                PreparedStatement p = cn.prepareStatement("select * from stocks_inver where user_id = ? and stocks_id = ?");
                p.setInt(1, id_user);
                p.setInt(2, id_stock);
                ResultSet rs = p.executeQuery();
                if (rs.next()) {
                    statement = "update stocks_inver set cantidad = cantidad + ? where user_id = ? and stocks_id = ?";
                } else {
                    statement = "insert into stocks_inver values(?,?,?,?,?)";
                }
                LocalDate date = LocalDate.now();
                PreparedStatement pst = cn.prepareStatement(statement);
                if (statement.equals("update stocks_inver set cantidad = cantidad + ? where user_id = ? and stocks_id = ?")) {
                    pst.setInt(1, stock);
                    pst.setInt(2, id_user);
                    pst.setInt(3, id_stock);
                } else {
                    pst.setInt(1, id_stock);
                    pst.setInt(2, id_user);
                    pst.setInt(3, stock);
                    pst.setString(4, "0");
                    pst.setDate(5, Date.valueOf(date));
                }
                pst.executeUpdate();
                pst.close();
                updateLabels(id_stock);

                PreparedStatement ps = cn.prepareStatement("update user_data set money = money - ? where id = ?");
                ps.setDouble(1, price * stock);
                ps.setInt(2, id_user);
                ps.executeUpdate();
                ps.close();
                cn.close();
            } catch (Exception e) {
                System.out.println("error extraer" + e);
            }

        } else {
            JOptionPane.showMessageDialog(null, "No tienes la plata suficiente");
        }


    }//GEN-LAST:event_jButton3ActionPerformed

    private void extraerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extraerButtonActionPerformed
        String[] lista = {"Coka " + String.format("%.2f", preci1), "Intello " + String.format("%.2f", preci2), "Somy " + String.format("%.2f", preci3)};
        double[] precios = {preci1, preci2, preci3};
        int[] cantidadesDisponibles = {Integer.parseInt(jLabel9.getText()), Integer.parseInt(jLabel10.getText()), Integer.parseInt(jLabel11.getText())};
        int[] cantidadesTotales = {Integer.parseInt(jLabel9.getText()), Integer.parseInt(jLabel10.getText()), Integer.parseInt(jLabel11.getText())};
        JLabel[] labels = {jLabel9, jLabel10, jLabel11};

        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        JCheckBox[] checkBoxes = new JCheckBox[lista.length];
        JSpinner[] spinners = new JSpinner[lista.length];

        for (int i = 0; i < lista.length; i++) {
            JPanel rowPanel = new JPanel();
            rowPanel.setLayout(new BoxLayout(rowPanel, BoxLayout.X_AXIS));

            checkBoxes[i] = new JCheckBox(lista[i]);
            spinners[i] = new JSpinner(new SpinnerNumberModel(0, 0, cantidadesDisponibles[i], 1));
            rowPanel.add(checkBoxes[i]);
            rowPanel.add(new JLabel(" Cantidad: "));
            rowPanel.add(spinners[i]);

            panel.add(rowPanel);
        }

        int result = JOptionPane.showConfirmDialog(null, panel, "Seleccione las inversiones", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            double total = 0;
            for (int i = 0; i < checkBoxes.length; i++) {
                if (checkBoxes[i].isSelected()) {
                    int cantidadAVender = (int) spinners[i].getValue();
                    if (cantidadAVender > 0) {
                        total += (precios[i] / cantidadesDisponibles[i]) * cantidadAVender;
                        cantidadesDisponibles[i] -= cantidadAVender;
                        labels[i].setText(String.valueOf(cantidadesDisponibles[i]));
                    }
                }
            }

            if (total > 0) {

                Connection cn = c.getConnection();
                try {
                    PreparedStatement pst = cn.prepareStatement("update user_data set money = money + ? where id = ?");
                    pst.setDouble(1, total);
                    pst.setInt(2, id_user);
                    pst.executeUpdate();
                    for (int i = 0; i < cantidadesTotales.length; i++) {
                        if (cantidadesDisponibles[i] == 0) {
                            PreparedStatement ps = cn.prepareStatement("delete from stocks_inver where user_id = ? and stocks_id = ?");
                            ps.setInt(1, id_user);
                            ps.setInt(2, i + 1);
                            ps.executeUpdate();
                            ps.close();
                        } else {
                            PreparedStatement ps = cn.prepareStatement("update stocks_inver set cantidad = ? where user_id = ? and stocks_id = ?");
                            ps.setInt(1, cantidadesDisponibles[i]);
                            ps.setInt(2, id_user);
                            ps.setInt(3, i + 1);
                            ps.executeUpdate();
                            ps.close();
                        }
                        jTextField2.setText("");
                    }
                    pst.close();
                    cn.close();
                    JOptionPane.showMessageDialog(null, "Cobrado con éxito!");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error al actualizar el dinero: " + e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(null, "No seleccionaste ninguna cantidad para vender.");
            }
        }
    }//GEN-LAST:event_extraerButtonActionPerformed
    public void getUser(String user) {
        this.user = user;
        prepareUser();
    }

    private void updateLabels(int id) {
        ArrayList<Integer> list = new ArrayList<>();
        ArrayList<Integer> cant = new ArrayList<>();
        ArrayList<Double> pric = new ArrayList<>();
        JLabel[] labels = {jLabel9, jLabel10, jLabel11};
        Connection cn = c.getConnection();

        try {
            PreparedStatement pst = cn.prepareStatement("select * from stocks_data where unique_id = ?");
            pst.setInt(1, id);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                price = rs.getDouble("price");
            }
            rs.close();
            pst.close();
        } catch (Exception e) {
            System.out.println("Error Ingreso" + e);
        }
        try {
            PreparedStatement pst = cn.prepareStatement("SELECT stocks_inver.stocks_id, stocks_inver.cantidad, stocks_data.price "
                    + "FROM stocks_inver "
                    + "JOIN stocks_data ON stocks_inver.stocks_id = stocks_data.unique_id "
                    + "WHERE stocks_inver.user_id = ? ORDER BY stocks_inver.stocks_id ASC");
            pst.setInt(1, id_user);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                do {
                    list.add(rs.getInt("stocks_id"));
                    cant.add(rs.getInt("cantidad"));
                    pric.add(rs.getDouble("price"));

                } while (rs.next());
            }
            cn.close();
            rs.close();
            pst.close();
        } catch (Exception e) {
            System.out.println("Error labels" + e);
        }
        if (!pric.isEmpty()) {

            for (int i = 0; i < list.size(); i++) {
                int aux = list.get(i);
                switch (aux) {
                    case 1:
                        preci1 = cant.get(i) * pric.get(i);
                        labels[0].setText(cant.get(i) + "");
                        break;
                    case 2:
                        preci2 = cant.get(i) * pric.get(i);
                        labels[1].setText(cant.get(i) + "");
                        break;
                    case 3:
                        preci3 = cant.get(i) * pric.get(i);
                        labels[2].setText(cant.get(i) + "");
                        break;
                }

            }
        } else {

            preci1 = .0;
            preci2 = .0;
            preci3 = .0;
        }

        Double numero = preci1 + preci2 + preci3;
        if (numero == 0) {
            extraerButton.setEnabled(false);
        } else {
            extraerButton.setEnabled(true);
        }
        jTextField1.setText(String.format("%.2f", price));
        jTextField2.setText(String.format("%.2f", numero));
    }

    private void prepareUser() {
        Connection cn = c.getConnection();
        try {
            PreparedStatement pst = cn.prepareStatement("select * from user_data where user_user = ?");
            pst.setString(1, user);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {

                id_user = rs.getInt("ID");
                money = rs.getDouble("money");
            }
            rs.close();
            pst.close();
            PreparedStatement ps = cn.prepareStatement("select * from cobros_data where user_id = ?");
            ps.setInt(1, id_user);
            ResultSet r = ps.executeQuery();
            if (r.next()) {
                do {
                    if (r.getInt("riesgo") == 0) {
                        jLabel4.setText("Activo");
                        jLabel5.setText(r.getInt("meses") + "");
                        fijoButton.setEnabled(false);
                    }
                } while (r.next());
            }
            setTable(cn);
            ps.close();
            r.close();
            cn.close();
        } catch (Exception e) {
            System.out.println("Error prepareUser" + e);
        }
    }

    private Conection c = new Conection();
    private Market market = new Market();
    private double money, price;
    private Double preci1 = .0, preci2 = .0, preci3 = .0;
    private int id_user, id_stock;
    private String user;
    private List<Timer> list = new ArrayList<>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Coka;
    private javax.swing.JPanel Imtel;
    private javax.swing.JPanel Somy;
    private javax.swing.JButton borrarButton;
    private javax.swing.JButton extraerButton;
    private javax.swing.JButton fijoButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JPanel juego;
    private javax.swing.JPanel juego_panel;
    private javax.swing.JButton riesgosasButton;
    // End of variables declaration//GEN-END:variables

    public class Market extends JPanel {

        private double zoomFactor = 1.0;  
        private Point origin = new Point(0, 0); 
        private Point dragOffset = new Point(); // Offset para el desplazamiento
        private ArrayList<Double> arr = new ArrayList<>();
        private ArrayList<String> date = new ArrayList<>();// Lista de precios
        private double minPrice = 0.0, maxPrice = 500.0;    // Mínimo y máximo para escalar el gráfico
        private int step = 100;
        private Point lastDragPoint;
        private Point mousePoint = null; 

        public Market() {

            addMouseWheelListener(new MouseWheelListener() {
                @Override
                public void mouseWheelMoved(MouseWheelEvent e) {
                    
                    double zoomChange = e.getPreciseWheelRotation() > 0 ? 0.9 : 1.1;
                    Point mousePosition = e.getPoint();
                    double newZoomFactor = zoomFactor * zoomChange;

                    if (newZoomFactor < 1.0) {
                        newZoomFactor = 1.0;
                    } else if (newZoomFactor > 5.0) {
                        newZoomFactor = 5.0;
                    }

  
                    double relativeX = (mousePosition.x - origin.x) / zoomFactor;
                    double relativeY = (mousePosition.y - origin.y) / zoomFactor;


                    zoomFactor = newZoomFactor;

 
                    origin.x = (int) (mousePosition.x - relativeX * zoomFactor);
                    origin.y = (int) (mousePosition.y - relativeY * zoomFactor);

                    // Aplicar límites al origen para mantener el gráfico dentro del panel
                    clampOrigin();
                    repaint();
                }

            });

            addMouseListener(new MouseAdapter() {

                @Override
                public void mousePressed(MouseEvent e) {
                    lastDragPoint = e.getPoint(); 

                }

                @Override
                public void mouseReleased(MouseEvent e) {

                    lastDragPoint = null;
                }
            });

            addMouseMotionListener(new MouseAdapter() {

                @Override
                public void mouseDragged(MouseEvent e) {
                    if (lastDragPoint != null) {
                        int deltaX = (int) ((e.getX() - lastDragPoint.x) / zoomFactor);
                        int deltaY = (int) ((e.getY() - lastDragPoint.y) / zoomFactor);

                        origin.x += deltaX;
                        origin.y += deltaY;
                        clampOrigin();
                        repaint();
                        lastDragPoint = e.getPoint();
                    }
                }

                @Override
                public void mouseMoved(MouseEvent e) {
                    mousePoint = e.getPoint();
                    repaint();
                }
            });
        }

        public void updateDraw(int id) {
           
            Connection cn = c.getConnection();

            try {
                PreparedStatement pst = cn.prepareStatement("SELECT price, fecha FROM stock_prices WHERE stock_id = ?");
                pst.setInt(1, id);
                ResultSet rs = pst.executeQuery();

                arr.clear();
                date.clear();
                while (rs.next()) {
                    arr.add(rs.getDouble("price"));
                    Timestamp timestamp = rs.getTimestamp("fecha");  
                    date.add(timestamp.toString());
                }
                cn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            repaint(); 
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;

            int width = getWidth();
            int height = getHeight();
            int maxHeight = height - 50;   
            int rightPadding = 50;       


            AffineTransform originalTransform = g2d.getTransform();
            g2d.translate(origin.x + dragOffset.x, origin.y + dragOffset.y);
            g2d.scale(zoomFactor, zoomFactor);
            drawScale(g2d, width, height, maxHeight, rightPadding);

            for (int i = 1; i < arr.size(); i++) {
                int x1 = (i - 1) * (width - rightPadding) / arr.size();
                int y1 = height - (int) ((arr.get(i - 1) - minPrice) / (maxPrice - minPrice) * maxHeight) - 10;
                int x2 = i * (width - rightPadding) / arr.size();
                int y2 = height - (int) ((arr.get(i) - minPrice) / (maxPrice - minPrice) * maxHeight) - 10;

                g2d.setColor(Color.BLUE);
                g2d.drawLine(x1, y1, x2, y2);
               
            }


            if (mousePoint != null) { 

                int closestIndex = getClosestIndex(mousePoint.x);
                if (closestIndex >= 0 && closestIndex < arr.size()) {
                    double priceAtMouse = arr.get(closestIndex);
                    String dates = date.get(closestIndex);


                    int pointX = ((closestIndex * (width - 50) / arr.size()));
                    int pointY = height - (int) (((priceAtMouse - minPrice) / (maxPrice - minPrice) * maxHeight)) - 10;


                    if (pointY >= 0 && pointY <= height) { 
                        int pointSize = 10; 
                        g2d.setColor(Color.RED);
                        g2d.fillOval(pointX - pointSize / 2, pointY - pointSize / 2, pointSize, pointSize); 


                        g2d.setColor(Color.BLACK);
                        if (closestIndex <= 20) {
                            g2d.drawString(String.format("%.2f", priceAtMouse), pointX - closestIndex, pointY - 10);

                        } else {
                            g2d.drawString(String.format("%.2f", priceAtMouse), pointX - 15, pointY - 10); 
                        }
                        g2d.drawString(dates, 15, 15);
                    }
                }
            }
            g2d.setTransform(originalTransform);
        }

        private int getClosestIndex(int mouseX) {
            // Normaliza la posición del mouse con el zoom
            double normalizedX = (mouseX - origin.x) / zoomFactor;
            int index = (int) Math.round(normalizedX * (arr.size() / (double) (getWidth() - 50)));
            return Math.max(0, Math.min(index, arr.size() - 1)); // Limita el índice al rango
        }

        private void drawScale(Graphics2D g2d, int width, int height, int maxHeight, int rightPadding) {
            g2d.setColor(Color.LIGHT_GRAY);
            int numberOfSteps = (int) (maxPrice / step);

            for (int i = 0; i <= numberOfSteps; i++) {
                int price = i * step;
                int y = height - (int) ((price - minPrice) / (maxPrice - minPrice) * maxHeight) - 10;
                g2d.drawLine(0, y, width - rightPadding, y);

                // Etiqueta del precio
                g2d.setColor(Color.BLACK);
                g2d.drawString(String.valueOf(price), width - rightPadding + 5, y + 5);
                g2d.setColor(Color.LIGHT_GRAY);  
            }
        }

        // Método para limitar el origen al arrastrar o hacer zoom
        private void clampOrigin() {
            int panelWidth = getWidth();
            int panelHeight = getHeight();

            int graphWidth = (int) (panelWidth * zoomFactor);
            int graphHeight = (int) (panelHeight * zoomFactor);


            if (graphWidth > panelWidth) {
                origin.x = Math.min(0, origin.x); 
                origin.x = Math.max(panelWidth - graphWidth, origin.x);
            } else {
                origin.x = (panelWidth - graphWidth) / 2; 
            }

           
            if (graphHeight > panelHeight) {
                origin.y = Math.min(0, origin.y); 
                origin.y = Math.max(panelHeight - graphHeight, origin.y); 
            } else {
                origin.y = (panelHeight - graphHeight) / 2;
            }
        }

        public void update(int id) {
            updateDraw(id);
            revalidate();
            repaint();
        }
    }
}
