/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cajeroonline;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.*;
import java.sql.Date;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author User
 */
public class Seguros extends javax.swing.JFrame {

    public Seguros() {
        initComponents();
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        button_vida = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        button_parcial = new javax.swing.JButton();
        button_total = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        button_ramdom = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel5.setBackground(new java.awt.Color(102, 102, 102));

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Seguro de Objetos:");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Seguro de vida:");

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Seguro monetario:");

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(255, 255, 255));
        jTextArea2.setColumns(20);
        jTextArea2.setForeground(new java.awt.Color(0, 0, 0));
        jTextArea2.setRows(5);
        jTextArea2.setText("Este seguro lo podes obtener para \nestar en el momento mas dificil de tus \npersonas mas amadas y que no le falte \nnada.  ");
        jTextArea2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextArea2.setFocusable(false);
        jTextArea2.setRequestFocusEnabled(false);
        jScrollPane2.setViewportView(jTextArea2);

        jPanel4.setLayout(new java.awt.CardLayout());

        jPanel6.setBackground(new java.awt.Color(102, 102, 102));

        jButton1.setText("Baja");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(63, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 7, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel6, "card3");

        button_vida.setText("Obtener");
        button_vida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_vidaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button_vida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_vida))
                .addGap(16, 16, 16))
        );

        button_vida.getAccessibleContext().setAccessibleDescription("");

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(255, 255, 255));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(0, 0, 0));
        jTextArea1.setRows(5);
        jTextArea1.setText("Este seguro protejera tu plata de \nposibles agentes malignos que quieran \napoderarse de ella tanto de manera \nvirtual como fisica.");
        jTextArea1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextArea1.setFocusable(false);
        jTextArea1.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(jTextArea1);

        button_parcial.setText("Parcial");
        button_parcial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_parcialActionPerformed(evt);
            }
        });

        button_total.setText("Total");
        button_total.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        button_total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_totalActionPerformed(evt);
            }
        });

        jButton2.setText("Pagar");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Pagar");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Pagar");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        jTextArea3.setEditable(false);
        jTextArea3.setBackground(new java.awt.Color(255, 255, 255));
        jTextArea3.setColumns(20);
        jTextArea3.setForeground(new java.awt.Color(0, 0, 0));
        jTextArea3.setRows(5);
        jTextArea3.setText("Este seguro es para aquellas personas\nque desean proteger un bien preciado \nde actores malignos que los desean,\ncon la seguridad que el BVVA les \ndevolvera mas que el valor monetario.");
        jTextArea3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextArea3.setFocusable(false);
        jTextArea3.setRequestFocusEnabled(false);
        jScrollPane3.setViewportView(jTextArea3);

        button_ramdom.setText("Cotizar");
        button_ramdom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_ramdomActionPerformed(evt);
            }
        });

        jButton6.setText("Baja");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(button_ramdom, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_ramdom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(19, 19, 19))
        );

        jButton5.setText("Baja");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jButton3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(button_parcial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(button_total, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jButton4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel4)
                        .addGap(28, 28, 28)
                        .addComponent(jButton2))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(28, 28, 28)
                        .addComponent(jButton3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(button_parcial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(button_total, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(21, 21, 21)
                        .addComponent(jButton4)
                        .addContainerGap())
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Seguro", "Monto", "Porcentaje"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowSelectionAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_parcialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_parcialActionPerformed
        if (!isUsed(2, user)) {

            JLabel valueLabel = new JLabel("Selected Value: 30");

            JSlider slider = new JSlider(0, 60, 30);
            slider.setMajorTickSpacing(30);
            slider.setMinorTickSpacing(1);
            slider.setPaintTicks(true);
            slider.setPaintLabels(true);

            slider.addChangeListener(new ChangeListener() {
                public void stateChanged(ChangeEvent e) {
                    int sliderValue = ((JSlider) e.getSource()).getValue();
                    valueLabel.setText("Selected Value: " + sliderValue);
                }
            });

            JPanel inputPanel = new JPanel(new BorderLayout());
            JPanel namePanel = new JPanel();
            inputPanel.add(namePanel, BorderLayout.NORTH);
            inputPanel.add(slider, BorderLayout.CENTER);
            inputPanel.add(valueLabel, BorderLayout.SOUTH);

            int option = JOptionPane.showConfirmDialog(null, inputPanel, "Select Value and Name", JOptionPane.OK_CANCEL_OPTION);

            double total;
            if (option == JOptionPane.OK_OPTION) {

                int porcentaje = slider.getValue();
             
                total = money * (porcentaje * 0.25) / 100;

                setStatement(user_id, 2, total, porcentaje * 0.25 / 100, user);

            }
        } else {
            JOptionPane.showMessageDialog(null, "Ya tiene seguro contratado, de baja el anterior");
        }
    }//GEN-LAST:event_button_parcialActionPerformed

    private void button_vidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_vidaActionPerformed
        if (income == 0) {
            JOptionPane.showMessageDialog(null, "No deposita su sueldo con nosotros");
        } else if (seguro1.size() >= 4) {
            JOptionPane.showMessageDialog(null, "Ya esta en el limite de seguros");
        } else {
            String nombre = JOptionPane.showInputDialog(
                    null,
                    "Ingresa un nombre para la base de datos:",
                    "Configuración de Base de Datos",
                    JOptionPane.QUESTION_MESSAGE
            );

            if (nombre != null && !nombre.trim().isEmpty()) {
                if (!isUsed(1, nombre)) {
                    double total = income * 5 / 100;
                    setStatement(user_id, 1, total, 5, nombre);

                } else {
                    JOptionPane.showMessageDialog(null, "Ya existe este seguro");
                }

            }

        }
    }//GEN-LAST:event_button_vidaActionPerformed

    private void button_ramdomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_ramdomActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(
                null,
                "¿Estás seguro de que deseas obetener el seguro?",
                "Confirmación de Obtencion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );

        if (respuesta == JOptionPane.YES_OPTION) {
            Connection cn = c.getConnection();
            try {
                PreparedStatement pst = cn.prepareStatement("insert into ayuda_data values(?,?,?,?)");
                pst.setInt(1, user_id);
                pst.setString(2, "Obtener Cotizacion");
                pst.setString(3, "0");
                pst.setString(4, "Incompleto");
                pst.executeUpdate();
                JOptionPane.showMessageDialog(null, "Ticket Creado!");
                pst.close();
                cn.close();
            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_button_ramdomActionPerformed

    private void button_totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_totalActionPerformed
        if (income == 0) {
            JOptionPane.showMessageDialog(null, "No deposita su sueldo con nosotros");
        } else {
            if (!isUsed(2, user)) {
                double total = income * 10 / 100;
                setStatement(user_id, 2, total, 10, user);
            } else {
                JOptionPane.showMessageDialog(null, "Ya tiene seguro contratado, de baja el anterior");
            }

        }
    }//GEN-LAST:event_button_totalActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        setPago(plata1, 1);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        setPago(plata2, 2);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        setPago(plata3, 3);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (seguro1.size() == 0) {
            JOptionPane.showMessageDialog(null, "No tiene seguros");
            return;
        }

        int respuestas = JOptionPane.showConfirmDialog(
                null,
                "¿Estás seguro de que deseas dar de baja del seguro?",
                "Confirmación de Baja",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );
        if (respuestas == JOptionPane.YES_OPTION) {

            if (seguro1.size() == 1) {
                setBaja(1);
            } else {

                String[] seguros = new String[seguro1.size()];
                for (int i = 0; i < seguro1.size(); i++) {
                    seguros[i] = seguro1.get(i);
                }

                JPanel panel = new JPanel();
                panel.setLayout(new GridLayout(seguros.length, 1));
                JCheckBox[] checkboxes = new JCheckBox[seguros.length];

                for (int i = 0; i < seguros.length; i++) {
                    checkboxes[i] = new JCheckBox(seguros[i]);
                    panel.add(checkboxes[i]);
                }

                int opcion = JOptionPane.showConfirmDialog(
                        null,
                        panel,
                        "Selecciona los seguros que deseas eliminar:",
                        JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE
                );

                if (opcion == JOptionPane.OK_OPTION) {
                    List<String> segurosSeleccionados = new ArrayList<>();
                    for (JCheckBox checkbox : checkboxes) {
                        if (checkbox.isSelected()) {
                            segurosSeleccionados.add(checkbox.getText());
                        }
                    }

                    if (!segurosSeleccionados.isEmpty()) {
                        int respuesta = JOptionPane.showConfirmDialog(
                                null,
                                "¿Estás seguro de que deseas eliminar los siguientes seguros?\n" + segurosSeleccionados,
                                "Confirmación de Eliminación",
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.WARNING_MESSAGE
                        );

                        if (respuesta == JOptionPane.YES_OPTION) {
                            for (String i : segurosSeleccionados) {
                                setBajaParcial(i);
                            }
                            JOptionPane.showMessageDialog(null, "Baja Exitosa!");
                        } else {
                            System.out.println("La operación de eliminación fue cancelada.");
                        }
                    } else {
                        System.out.println("No se seleccionaron seguros para eliminar.");
                    }
                } else {
                    System.out.println("Operación cancelada por el usuario.");
                }

            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (seguro3.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No posee seguros");
            return;
        }

        int respuestas = JOptionPane.showConfirmDialog(
                null,
                "¿Estás seguro de que deseas dar de baja del seguro?",
                "Confirmación de Baja",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );
        if (respuestas == JOptionPane.YES_OPTION) {
            if (seguro3.size() == 1) {

                setBaja(3);

            } else {

                String[] seguros = new String[seguro3.size()];
                for (int i = 0; i < seguro3.size(); i++) {
                    seguros[i] = seguro3.get(i);
                }
                JPanel panel = new JPanel();
                panel.setLayout(new GridLayout(seguros.length, 1));
                JCheckBox[] checkboxes = new JCheckBox[seguros.length];

                for (int i = 0; i < seguros.length; i++) {
                    checkboxes[i] = new JCheckBox(seguros[i]);
                    panel.add(checkboxes[i]);
                }

                int opcion = JOptionPane.showConfirmDialog(
                        null,
                        panel,
                        "Selecciona los seguros que deseas eliminar:",
                        JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE
                );

                if (opcion == JOptionPane.OK_OPTION) {
                    List<String> segurosSeleccionados = new ArrayList<>();
                    for (JCheckBox checkbox : checkboxes) {
                        if (checkbox.isSelected()) {
                            segurosSeleccionados.add(checkbox.getText());
                        }
                    }

                    if (!segurosSeleccionados.isEmpty()) {
                        int respuesta = JOptionPane.showConfirmDialog(
                                null,
                                "¿Estás seguro de que deseas eliminar los siguientes seguros?\n" + segurosSeleccionados,
                                "Confirmación de Eliminación",
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.WARNING_MESSAGE
                        );

                        if (respuesta == JOptionPane.YES_OPTION) {
                            for (String i : segurosSeleccionados) {
                                setBajaParcial(i);
                            }
                            JOptionPane.showMessageDialog(null, "Baja Exitosa!");
                        } else {
                            System.out.println("La operación de eliminación fue cancelada.");
                        }
                    } else {
                        System.out.println("No se seleccionaron seguros para eliminar.");
                    }
                } else {
                    System.out.println("Operación cancelada por el usuario.");
                }

            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
        int respuestas = JOptionPane.showConfirmDialog(
                null,
                "¿Estás seguro de que deseas dar de baja del seguro?",
                "Confirmación de Baja",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );
        if (respuestas == JOptionPane.YES_OPTION) {
            Connection cn = c.getConnection();

            try {
                PreparedStatement pst = cn.prepareStatement("select date, pagado from seguros_data where seguros_id = ? and user_id = ?");
                pst.setInt(1, 2);
                pst.setInt(2, user_id);
                ResultSet rs = pst.executeQuery();
                if (rs.next()) {
                    Date date = rs.getDate("date");
                    long diasTranscurridos = ChronoUnit.DAYS.between(date.toLocalDate(), LocalDate.now());
                    if (diasTranscurridos < 7 || rs.getInt("pagado") == 1) {
                        PreparedStatement ps = cn.prepareStatement("delete from seguros_data where seguros_id = ? and user_id = ?");
                        ps.setInt(1, 2);
                        ps.setInt(2, user_id);
                        ps.executeUpdate();
                        ps.close();
                        JOptionPane.showMessageDialog(null, "Baja Exitosa!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Debe abonar para dar de baja");
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "No posee seguro");
                }

                setTable(cn);
                pst.close();
                cn.close();
            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private boolean isUsed(int seguro, String name) {
        Connection cn = c.getConnection();
        try {
            PreparedStatement pst = cn.prepareStatement("select * from seguros_data where seguros_id = ? and name = ?");
            pst.setInt(1, seguro);
            pst.setString(2, name);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                pst.close();
                cn.close();
                rs.close();
                return true;
            } else {
                pst.close();
                cn.close();
                rs.close();
                return false;
            }
        } catch (Exception e) {
            return true;
        }

    }

    private void setPago(double plata, int id) {
        int respuesta = JOptionPane.showConfirmDialog(
                null,
                "¿Estás seguro de que deseas obtener pagar?",
                "Confirmación de Pago",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );
        if (respuesta == JOptionPane.YES_OPTION) {
            if (money >= plata && plata != 0) {
                Connection cn = c.getConnection();
                try {
                    ArrayList<ArrayList<Integer>> list = new ArrayList<>(Arrays.asList(ids, ids2, ids3));
                    ArrayList<Integer> list2 = list.get(id - 1);

                    java.util.Date utilDate = new java.util.Date(); // Fecha actual
                    java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
                    PreparedStatement ps = cn.prepareStatement("insert into pagos_data values(?,?,?,?,?,?)");
                    for (int i = 0; i < pagar.size(); i++) {
                        ps.setInt(1, id);
                        ps.setDouble(2, pagar.get(i));
                        ps.setInt(3, 3);
                        ps.setInt(4, list2.get(i));
                        ps.setString(5, "0");
                        ps.setDate(6, sqlDate);
                        ps.addBatch();

                    }
                    ps.executeBatch();
                    PreparedStatement pst = cn.prepareStatement("update user_data set money = money - ? where id = ?");
                    pst.setDouble(1, plata);
                    pst.setInt(2, user_id);
                    pst.executeUpdate();
                    updateCrediticio(id);
                    switch (id) {
                        case 1:
                            plata1 = 0;
                            break;
                        case 2:
                            plata2 = 0;
                            break;
                        case 3:
                            plata3 = 0;
                            break;
                    }
                    setTable(cn);
                    JOptionPane.showMessageDialog(null, "Pago exitoso!");
                    ps.close();
                    pst.close();
                    cn.close();
                } catch (Exception e) {
                    System.out.println("error en: " + e);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Fondos Insuficientes");
            }

        }
    }

    private void updateCrediticio(int id) {
        ArrayList<ArrayList<Integer>> list = new ArrayList<>(Arrays.asList(ids, ids2, ids3));
        ArrayList<Integer> list2 = list.get(id - 1);
        Connection cn = c.getConnection();
        try {
            PreparedStatement pst = cn.prepareStatement("update seguros_data set pagado = ? where unique_id = ?");
            for (int i = 0; i < list2.size(); i++) {
                pst.setInt(1, 1);
                pst.setInt(2, list2.get(i));
                pst.addBatch();
            }
            pst.executeBatch();

        } catch (Exception ex) {
            try {
                cn.rollback();
            } catch (SQLException ex1) {
                Logger.getLogger(Seguros.class.getName()).log(Level.SEVERE, null, ex1);
            }
            System.out.println("Exception " + ex);
        }
    }

    private void setBaja(int seguroid) {
        Connection cn = c.getConnection();
        try {
            PreparedStatement pst = cn.prepareStatement("select date, pagado from seguros_data where seguros_id = ? and user_id = ?");
            pst.setInt(1, seguroid);
            pst.setInt(2, user_id);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                Date date = rs.getDate("date");
                long diasTranscurridos = ChronoUnit.DAYS.between(date.toLocalDate(), LocalDate.now());
                if (diasTranscurridos < 7 || rs.getInt("pagado") == 1) {
                    PreparedStatement ps = cn.prepareStatement("delete from seguros_data where seguros_id = ? and user_id = ?");
                    ps.setInt(1, 2);
                    ps.setInt(2, user_id);
                    ps.executeUpdate();
                    ps.close();
                    JOptionPane.showMessageDialog(null, "Baja Exitosa!");
                } else {
                    JOptionPane.showMessageDialog(null, "Debe abonar para dar de baja");
                }
            }
            pst.executeUpdate();

            pst.close();
            setTable(cn);
            cn.close();
        } catch (Exception e) {
            System.out.println("Error en setBaja: " + e);
        }
    }

    private void setBajaParcial(String name) {
        Connection cn = c.getConnection();
        try {
            PreparedStatement ps = cn.prepareStatement("select date, pagado from seguros_data where name = ?");
            ps.setString(1, name);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Date date = rs.getDate("date");
                long diasTranscurridos = ChronoUnit.DAYS.between(date.toLocalDate(), LocalDate.now());
                if (diasTranscurridos < 7) {
                    PreparedStatement pst = cn.prepareStatement("delete from seguros_data where name = ?");
                    pst.setString(1, name);
                    pst.executeUpdate();
                    pst.close();

                } else if (rs.getInt("pagado") == 1) {
                    PreparedStatement pst = cn.prepareStatement("delete from seguros_data where name = ?");
                    pst.setString(1, name);
                    pst.executeUpdate();
                    pst.close();
                } else {
                    JOptionPane.showMessageDialog(null, "Debe abonar para dar de baja");
                }
                setTable(cn);
                cn.close();
            }

        } catch (Exception e) {
            System.out.println("Error en setBajaParcial: " + e);
        }
    }

    public void getUser(String user) {
        this.user = user;
        Connection cn = c.getConnection();
        prepareUser(cn);
        setTable(cn);
        try {
            cn.close();
        } catch (SQLException ex) {
            Logger.getLogger(Seguros.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void prepareUser(Connection cn) {
        try {
            PreparedStatement pst = cn.prepareStatement("select * from user_data where user_user = ?");
            pst.setString(1, user);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                income = rs.getDouble("income");
                money = rs.getDouble("money");
                user_id = rs.getInt("ID");
            }
            rs.close();
            pst.close();

        } catch (Exception e) {
        }
    }

    private void setStatement(int user_id, int seguro_id, double monto, double porcentaje, String name) {
        Connection cn = c.getConnection();
        try {
            PreparedStatement pst = cn.prepareStatement("insert into seguros_data values(?,?,?,?,?,?,?,?)");
            pst.setInt(1, user_id);
            pst.setInt(2, seguro_id);
            pst.setDouble(3, monto);
            pst.setDouble(4, porcentaje);
            pst.setString(5, "0");
            pst.setString(6, name);
            pst.setDate(7, new Date(System.currentTimeMillis()));
            pst.setInt(8, 0);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Adicion exitosa.");
            setTable(c.getConnection());
            setSeguros();
            pst.close();
            cn.close();
        } catch (Exception e) {
            System.out.println("Error en setStatement: " + e);
        }
    }

    private void setSeguros() {
        Connection cn = c.getConnection();
        try {
            PreparedStatement pst = cn.prepareStatement("update user_data set seguros = ?  where id = ?");
            pst.setInt(1, 1);
            pst.setInt(2, user_id);
            pst.executeUpdate();
            pst.close();
            cn.close();
        } catch (Exception e) {
            System.out.println("Error en setStatement: " + e);
        }
    }

    private void setTable(Connection cn) {
        try {
            PreparedStatement pst = cn.prepareStatement("select * from seguros_data where user_id = ?");
            pst.setInt(1, user_id);
            ResultSet rs = pst.executeQuery();
            DefaultTableModel table = (DefaultTableModel) jTable1.getModel();
            table.setRowCount(0);
            jTable1.setFillsViewportHeight(true);
            ((JComponent) jTable1.getParent()).setBackground(Color.lightGray);
            seguro1.clear();
            seguro3.clear();
            if (rs.next()) {
                do {
                    if (rs.getInt("pagado") == 0) {
                        switch (rs.getInt("seguros_id")) {
                            case 1:
                                plata1 += rs.getDouble("monto_mes");
                                pagar.add(rs.getDouble("monto_mes"));
                                ids.add(rs.getInt("unique_id"));
                                seguro1.add(rs.getString("name"));
                                jButton2.setEnabled(true);
                                break;
                            case 2:
                                plata2 += rs.getDouble("monto_mes");
                                pagar.add(rs.getDouble("monto_mes"));
                                ids2.add(rs.getInt("unique_id"));
                                jButton3.setEnabled(true);
                                break;
                            default:
                                plata3 += rs.getDouble("monto_mes");
                                pagar.add(rs.getDouble("monto_mes"));
                                ids3.add(rs.getInt("unique_id"));
                                seguro3.add(rs.getString("name"));
                                jButton4.setEnabled(true);
                                break;
                        }
                        table.addRow(new Object[]{rs.getInt("seguros_id"), rs.getInt("monto_mes"), rs.getInt("porcentaje")});
                    } else {
                        table.addRow(new Object[]{rs.getInt("seguros_id"), rs.getInt("monto_mes"), rs.getInt("porcentaje")});
                        if (plata1 == 0) {
                            jButton2.setEnabled(false);
                        }
                        if (plata2 == 0) {
                            jButton3.setEnabled(false);
                        }
                        if (plata3 == 0) {
                            jButton4.setEnabled(false);
                        }
                    }
                } while (rs.next());
                pst.close();
                rs.close();
            } else {
                table.addRow(new Object[]{"No", "posee", "seguro activo"});
                jButton2.setEnabled(false);
                jButton3.setEnabled(false);
                jButton4.setEnabled(false);
            }
            cn.close();

        } catch (Exception e) {
            System.out.println("Error en setTable: " + e);
        }

    }

    private String user;
    private int user_id;
    private final List<String> seguro1 = new ArrayList<>();
    private ArrayList<Double> pagar = new ArrayList<>();
    private ArrayList<Integer> ids = new ArrayList<>();
    private ArrayList<Integer> ids2 = new ArrayList<>();
    private ArrayList<Integer> ids3 = new ArrayList<>();
    private final List<String> seguro3 = new ArrayList<>();
    private double income, money, plata1, plata2, plata3;
    private double[] array = {plata1, plata2, plata3};
    private final Conection c = new Conection();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_parcial;
    private javax.swing.JButton button_ramdom;
    private javax.swing.JButton button_total;
    private javax.swing.JButton button_vida;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    // End of variables declaration//GEN-END:variables
}
