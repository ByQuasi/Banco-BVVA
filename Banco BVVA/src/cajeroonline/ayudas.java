/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cajeroonline;

import java.awt.Color;
import java.awt.event.ItemEvent;
import java.sql.*;

import java.sql.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.*;
import java.awt.*;
import java.security.SecureRandom;
import javax.swing.border.BevelBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class ayudas extends javax.swing.JFrame {

    /**
     * Creates new form ayudas
     */
    public ayudas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        bajaButton = new javax.swing.JButton();
        modificarButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        tablaIdField = new javax.swing.JTextField();
        idTableField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        buscarTablaButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        bajaField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        mailField = new javax.swing.JTextField();
        userField = new javax.swing.JTextField();
        nombreField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        creditosButton = new javax.swing.JButton();
        tarjetasButton = new javax.swing.JButton();
        cotizacionButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        verHistButton = new javax.swing.JButton();
        crediticioField = new javax.swing.JTextField();
        levelLabel = new javax.swing.JLabel();
        levelLabelT = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        buscarButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Cambio de Usuario: ");

        jLabel3.setText("Baja de usuario:");

        jLabel6.setText("Modificacion Nombre:");

        jLabel7.setText("Mail:");

        bajaButton.setText("Baja");
        bajaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bajaButtonActionPerformed(evt);
            }
        });

        modificarButton.setText("Modificar");
        modificarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Busqueda por ID:");

        jLabel9.setText("Tabla");

        jLabel10.setText("ID");

        buscarTablaButton.setText("Buscar");
        buscarTablaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarTablaButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("I");
        jLabel11.setToolTipText("1. Tranferencias 2. Tarjetas 3.Seguros 4. Pagos 5. Inversiones 6. Creditos 7. Plazo Fijo 8. Ayuda");
        jLabel11.setOpaque(true);
        jLabel11.setOpaque(true);

        jLabel12.setText("ID Usuario:");

        jPanel3.setLayout(null);
        jPanel3.add(mailField);
        mailField.setBounds(1, 56, 150, 22);
        jPanel3.add(userField);
        userField.setBounds(0, 0, 150, 22);

        nombreField.setPreferredSize(new java.awt.Dimension(74, 22));
        jPanel3.add(nombreField);
        nombreField.setBounds(1, 28, 150, 22);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bajaField, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel6))
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(idField)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(modificarButton))
                                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(tablaIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(bajaButton)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(idTableField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(buscarTablaButton))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel11)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel10)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modificarButton)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10))
                        .addGap(1, 1, 1)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(tablaIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idTableField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarTablaButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(bajaButton)
                    .addComponent(bajaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel11.getAccessibleContext().setAccessibleParent(this);

        jLabel4.setText("Seleccion de Tarjeta:");

        jLabel5.setText("Cotizacion seguros:");

        jLabel2.setText("Seleccion de Credito:");

        creditosButton.setText("Ver");
        creditosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditosButtonActionPerformed(evt);
            }
        });

        tarjetasButton.setText("Ver");
        tarjetasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tarjetasButtonActionPerformed(evt);
            }
        });

        cotizacionButton.setText("Ver");
        cotizacionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cotizacionButtonActionPerformed(evt);
            }
        });

        jLabel14.setText("Historial crediticio: ");

        verHistButton.setText("Ver");
        verHistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verHistButtonActionPerformed(evt);
            }
        });

        levelLabelT.setVisible(false);

        jPanel4.setBackground(new java.awt.Color(0, 51, 153));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(levelLabel)
                        .addGap(29, 29, 29)
                        .addComponent(crediticioField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(verHistButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(levelLabelT)
                        .addGap(38, 38, 38))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(creditosButton)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tarjetasButton)
                                    .addComponent(cotizacionButton))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(verHistButton)
                    .addComponent(crediticioField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(levelLabel)
                    .addComponent(levelLabelT))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(creditosButton))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(tarjetasButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cotizacionButton)))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Usuario", "Tipo", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel13.setText("Usuario ID:");

        buscarButton.setText("Buscar");
        buscarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jTextField7)
                            .addComponent(buscarButton)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(4, 4, 4)
                        .addComponent(jTextField7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buscarButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void modificarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarButtonActionPerformed
        if (idField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar numero de id de usuario");
            return;
        }
        Connection cn = c.getConnection();
        int id = Integer.parseInt(idField.getText());
        try {
            PreparedStatement pst = cn.prepareStatement("select * from user_data where id = ?");
            pst.setInt(1, id);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                String user = rs.getString("user_user");
                String name = rs.getString("user_name");
                String mail = rs.getString("user_mail");
                PreparedStatement ps = cn.prepareStatement("update user_data set user_user = ?, user_name = ?, user_mail = ? where id = ?");
                if (!userField.getText().isBlank()) {
                    ps.setString(1, userField.getText().trim());
                } else {
                    ps.setString(1, user);
                }
                if (!nombreField.getText().isBlank()) {
                    ps.setString(2, nombreField.getText().trim());
                } else {
                    ps.setString(2, name);
                }
                if (!mailField.getText().isBlank()) {
                    ps.setString(3, mailField.getText().trim());
                } else {
                    ps.setString(3, mail);
                }
                ps.setInt(4, id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Cambiado con exito");
                cn.close();
                ps.close();
                pst.close();
            }
        } catch (Exception e) {
            System.out.println("Error modif: " + e);
        }
    }//GEN-LAST:event_modificarButtonActionPerformed

    private void bajaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bajaButtonActionPerformed
        if (crediticioField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar id de usuario");
            return;
        }
        int result = JOptionPane.showConfirmDialog(null, "Enserio desea borrar un usuario?", "", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            int aux = prepareBaja(Integer.parseInt(bajaField.getText().trim()));
            boolean flag = false;
            if (aux > 0) {
                Connection cn = c.getConnection();
                String[] tables = {"user_data", "ayuda_data", "crediticio_data"};
                int i = 0;
                while (i < 3) {
                    String statement = "delete from " + tables[i] + " where id = ?";
                    try {

                        PreparedStatement pst = cn.prepareStatement(statement);
                        pst.setInt(1, Integer.parseInt(bajaField.getText().trim()));
                        pst.executeUpdate();
                        i++;
                        pst.close();

                    } catch (SQLException ex) {
                        flag = true;
                    }
                    if (!flag) {
                        JOptionPane.showMessageDialog(null, "Eliminado con exito!");
                    } else {
                        JOptionPane.showMessageDialog(null, "No se pudo eliminar");
                    }

                }
            }
        }

    }//GEN-LAST:event_bajaButtonActionPerformed

    private int prepareBaja(int id) {
        String[] tables = {"cobros_data", "creditos_data", "inversiones_data", "pagos_data", "seguros_data", "tarjetas_data"};
        int i = 0;
        while (i <= 5) {
            String statement = "select * from " + tables[i] + " where user_id = ?";
            Connection cn = c.getConnection();
            try {
                PreparedStatement pst = cn.prepareStatement(statement);
                pst.setInt(1, id);
                ResultSet rs = pst.executeQuery();
                if (rs.next()) {
                    JOptionPane.showMessageDialog(null, "Posee asuntos todavia no resueltos en " + tables[i]);
                    i = 6;
                    cn.close();
                    pst.close();
                    rs.close();
                    return 0;
                }
                if (i == 5) {
                    cn.close();
                    pst.close();
                    rs.close();
                }
                i++;
            } catch (Exception e) {
            }
        }
        return 1;
    }


    private void buscarTablaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarTablaButtonActionPerformed
        if (tablaIdField.getText().isEmpty() || idTableField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar id de usuario o tabla");
            return;
        }
        Connection cn = c.getConnection();
        String statement = "select * from " + Tablas.values()[Integer.parseInt(tablaIdField.getText()) - 1] + " where user_id = ?";
        try {
            PreparedStatement pst = cn.prepareStatement(statement);
            pst.setInt(1, Integer.parseInt(idTableField.getText()));
            DefaultTableModel tableModel = new DefaultTableModel();
            ResultSet rs = pst.executeQuery();
            ResultSetMetaData data = rs.getMetaData();
            int aux = data.getColumnCount();
            for (int i = 1; i <= aux; i++) {
                tableModel.addColumn(data.getColumnName(i));
            }
            if (rs.next()) {
                do {
                    Object[] row = new Object[aux];
                    for (int i = 1; i <= aux; i++) {
                        row[i - 1] = rs.getObject(i);
                    }
                    tableModel.addRow(row);
                } while (rs.next());
            }

            JFrame nuevoFrame = new JFrame("Datos de SQL");
            nuevoFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            nuevoFrame.setSize(800, 600);

            JTable table = new JTable(tableModel);
            JScrollPane scrollPane = new JScrollPane(table);
            nuevoFrame.add(scrollPane);

            nuevoFrame.setVisible(true);

            cn.close();
            pst.close();
            rs.close();
        } catch (Exception e) {
            System.out.println("Error jaj: " + e);
        }
    }//GEN-LAST:event_buscarTablaButtonActionPerformed

    private void buscarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarButtonActionPerformed
        if (jTextField7.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar id de usuario");
            return;
        }
        Connection cn = c.getConnection();
        try {
            PreparedStatement pst = cn.prepareStatement("select * from ayuda_data where user_id = ?");
            pst.setInt(1, Integer.parseInt(jTextField7.getText()));
            DefaultTableModel table = (DefaultTableModel) jTable1.getModel();
            ResultSet rs = pst.executeQuery();
            table.setRowCount(0);
            if (rs.next()) {
                do {
                    if (!rs.getString("status").equals("Completado")) {

                        table.addRow(new Object[]{rs.getString("user_id"), rs.getString("tipo"), rs.getInt("unique_id")});

                    }
                } while (rs.next());

            }
            cn.close();
            pst.close();
            rs.close();
        } catch (Exception e) {
            System.out.println("Error en Tabla: " + e);
        }
    }//GEN-LAST:event_buscarButtonActionPerformed

    private void creditosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditosButtonActionPerformed
        int id;
        try {
            id = Integer.parseInt(crediticioField.getText().trim());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Debe ingresar id de usuario");
            return;
        }
        String[] creditos = {"Medianos", "Hipotecarios", "PyMES"};
        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setResizable(false);
        frame.setSize(600, 250);

        JPanel panel = new JPanel();
        panel.setLayout(null);
        panel.setBounds(0, 0, 600, 600);
        frame.add(panel);

        JComboBox<String> comboBox = new JComboBox<>(creditos);
        comboBox.setBounds(165, 10, 150, 20);
        panel.add(comboBox);

        JLabel label1 = new JLabel("Selecione el tipo de credito:");
        label1.setBounds(10, 10, 200, 20);
        panel.add(label1);

        JLabel label2 = new JLabel("Monto:");
        label2.setBounds(125, 50, 200, 20);
        panel.add(label2);

        JTextField field = new JTextField();
        field.setBounds(165, 50, 150, 25);
        panel.add(field);

        JPanel panelG = new JPanel();
        panelG.setBounds(0, 70, 350, 530);
        panelG.setLayout(new CardLayout());

        JPanel panel1 = new JPanel();

        panel1.setLayout(null);

        JPanel panel2 = new JPanel();

        panel2.setLayout(null);

        JPanel panel3 = new JPanel();

        panel3.setLayout(null);

        panelG.add(panel1, "Medianos");
        panelG.add(panel2, "PyMES");
        panelG.add(panel3, "Hipotecarios");
        panel.add(panelG);

        JPanel panelF = new JPanel();
        panelF.setBounds(350, 0, 250, 600);
        panelF.setLayout(new CardLayout());

        JPanel panel4 = new JPanel();
        panel4.setLayout(null);

        JPanel panel5 = new JPanel();

        panel5.setLayout(null);

        JPanel panel6 = new JPanel();

        panel6.setLayout(null);
        panelF.add(panel4, "Medianos");
        panelF.add(panel5, "PyMES");
        panelF.add(panel6, "Hipotecarios");

        panel.add(panelF);

        CardLayout cl = (CardLayout) (panelG.getLayout());
        CardLayout cg = (CardLayout) (panelF.getLayout());
        double level = Double.parseDouble(levelLabel.getText());
        JLabel cuotas = new JLabel();
        JTextField fieldC = new JTextField();
        cuotas.setText("Cuotas:");
        cuotas.setBounds(123, 30, 200, 20);
        panel1.add(cuotas);
        fieldC.setBounds(165, 30, 150, 25);
        panel1.add(fieldC);
        JButton button = new JButton("Finalizar");
        button.setBounds(190, 75, 90, 25);
        panel1.add(button);
        button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setStatementC(id, Double.parseDouble(field.getText().trim()), 2, 12, 1, Integer.parseInt(fieldC.getText().trim()));
            }
        });
        JButton cotizar = new JButton("Cotizar");
        cotizar.setBounds(190, 6, 90, 25);
        panel1.add(cotizar);
        cotizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                double numes = Double.parseDouble(field.getText().trim());

                String cuotasInput = JOptionPane.showInputDialog(
                        null,
                        "¿Cuántas cuotas deseas?",
                        "Número de cuotas",
                        JOptionPane.QUESTION_MESSAGE
                );

                if (cuotasInput != null && !cuotasInput.isEmpty()) {
                    try {
                        int cuotas = Integer.parseInt(cuotasInput);
                        double gg = .21;

                        JPanel cuotasPanel = new JPanel();
                        cuotasPanel.setLayout(new BoxLayout(cuotasPanel, BoxLayout.Y_AXIS));
                        double aux = numes / cuotas;
                        //aux sirve para descontar del valor total cada vez que pasa y a numes se lo multiplica por 0.21 del interes
                        for (int i = 1; i <= cuotas; i++) {
                            double inte = numes * gg;
                            double cuot = aux + inte;
                            numes -= aux;
                            cuotasPanel.add(new JLabel("Cuota " + i + ": $" + String.format("%.2f", cuot)));
                        }

                        JOptionPane.showMessageDialog(
                                null,
                                cuotasPanel,
                                "Desglose de cuotas",
                                JOptionPane.INFORMATION_MESSAGE
                        );
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(
                                null,
                                "Por favor, ingrese un número válido.",
                                "Error",
                                JOptionPane.ERROR_MESSAGE
                        );
                    }

                }
            }
        });
        panel1.revalidate();
        panel1.repaint();
        JTextArea textArea = new JTextArea(
                "Créditos Medianos:\n"
                + "Recorda de ofrecer el máximo de cuotas disponibles.\n"
                + "El cálculo es de 10% (mínimo 12 cuotas) + 0.5% cada mes adicional.\n"
                + "El cliente puede cancelar las mismas y su dinero es de acreditación inmediata.\n"
                + "Podes realizar una simulación aquí:"
        );
        textArea.setBounds(10, 10, 200, 200); // Configurar posición y tamaño
        textArea.setLineWrap(true); // Habilitar ajuste de línea
        textArea.setWrapStyleWord(true); // Ajustar líneas por palabra
        textArea.setEditable(false);
        textArea.setBorder(null);
        textArea.setOpaque(false);
        textArea.setBackground(new Color(0, 0, 0, 0));
        panel4.add(textArea);
        panel4.revalidate();
        panel4.repaint();

        cl.show(panelG, "Medianos");
        cg.show(panelF, "Medianos");
        comboBox.addItemListener(e -> {

            if (e.getStateChange() == ItemEvent.SELECTED) {
                String selectedOption = (String) comboBox.getSelectedItem();

                switch (selectedOption) {

                    case "Medianos":
                        if (level < 0.01) {
                            JOptionPane.showMessageDialog(null, "No tiene el historial necesario.");
                            break;
                        } else {

                            cl.show(panelG, "Medianos");
                            cg.show(panelF, "Medianos");
                            break;
                        }
                    case "PyMES":
                        if (level < 0.5) {
                            JOptionPane.showMessageDialog(null, "No tiene el historial necesario.");
                            break;
                        } else {
                            JLabel cuota = new JLabel();
                            cuota.setText("Coutas:");
                            cuota.setBounds(123, 70, 200, 20);
                            panel2.add(cuota);

                            JTextField field3 = new JTextField();
                            field3.setBounds(165, 70, 150, 25);
                            panel2.add(field3);

                            JLabel tipo = new JLabel();
                            tipo.setText("Tipo de Empresa:");
                            tipo.setBounds(67, 20, 200, 20);
                            panel2.add(tipo);

                            String[] tipos = {"Tecnologia", "Mineria", "Textil", "Otros"};
                            JComboBox<String> comboBox2 = new JComboBox<>(tipos);
                            comboBox2.setBounds(165, 20, 150, 25);
                            panel2.add(comboBox2);

                            comboBox2.addItemListener(er -> {

                                if (er.getStateChange() == ItemEvent.SELECTED) {
                                    String selectedOption2 = (String) comboBox2.getSelectedItem();
                                    switch (selectedOption2) {
                                        case "Tecnologia":
                                            aux = .5;
                                            break;
                                        case ("Mineria"):
                                            aux = .12;
                                            break;
                                        case ("Textil"):
                                            aux = .15;
                                            break;
                                        case ("Otros"):
                                            aux = .20;
                                            break;
                                    }
                                }

                            });
                            JButton cotizar2 = new JButton("Cotizar");
                            cotizar2.setBounds(190, 45, 90, 25);
                            panel2.add(cotizar2);
                            cotizar2.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    double numes = Double.parseDouble(field.getText().trim());

                                    String cuotasInput = JOptionPane.showInputDialog(
                                            null,
                                            "¿Cuántas cuotas deseas?",
                                            "Número de cuotas",
                                            JOptionPane.QUESTION_MESSAGE
                                    );

                                    if (cuotasInput != null && !cuotasInput.isEmpty()) {
                                        try {
                                            int cuotas = Integer.parseInt(cuotasInput);
                                            //aux seria el porcentaje, cuotas se le resta 12 porq se cobra un adicional del 0.02 por cuota despues de la doceava
                                            double gg = aux * (1 + 0.02 * (cuotas - 12));

                                            JPanel cuotasPanel = new JPanel();
                                            cuotasPanel.setLayout(new BoxLayout(cuotasPanel, BoxLayout.Y_AXIS));
                                            double aux = numes / cuotas;

                                            for (int i = 1; i <= cuotas; i++) {
                                                double inte = numes * gg;
                                                double cuot = aux + inte;
                                                numes -= aux;
                                                cuotasPanel.add(new JLabel("Cuota " + i + ": $" + String.format("%.2f", cuot)));
                                            }

                                            JOptionPane.showMessageDialog(
                                                    null,
                                                    cuotasPanel,
                                                    "Desglose de cuotas",
                                                    JOptionPane.INFORMATION_MESSAGE
                                            );
                                        } catch (NumberFormatException e) {
                                            JOptionPane.showMessageDialog(
                                                    null,
                                                    "Por favor, ingrese un número válido.",
                                                    "Error",
                                                    JOptionPane.ERROR_MESSAGE
                                            );
                                        }

                                    }
                                }
                            });
                            JButton button2 = new JButton("Finalizar");
                            button2.setBounds(190, 95, 90, 25);
                            panel2.add(button2);
                            button2.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    setStatementC(id, Double.parseDouble(field.getText().trim()), 3, aux, 1, Integer.parseInt(field3.getText().trim()));
                                    setCuentaPyme(id, Double.parseDouble(field.getText().trim()));
                                }
                            });

                            JTextArea textAreaPyMEs = new JTextArea(
                                    "Créditos PyMEs:\n"
                                    + "Dependiendo del rubro, se puede ofrecer distintos porcentajes.\n"
                                    + "Recorda que los clientes que piden esto, se les tendrá que generar una cuenta tipo PyME,\n"
                                    + "y se les debitará el monto concebido allí.\n"
                                    + "Menciona que la cuenta tipo PyME tiene atención preferencial.\n"
                                    + "El cálculo lo podes realizar aquí:"
                            );
                            textAreaPyMEs.setBounds(10, 10, 200, 200); // Posición y tamaño
                            textAreaPyMEs.setLineWrap(true);
                            textAreaPyMEs.setWrapStyleWord(true);
                            textAreaPyMEs.setEditable(false);
                            textAreaPyMEs.setBackground(new Color(0, 0, 0, 0));
                            textAreaPyMEs.setBorder(null);
                            panel5.add(textAreaPyMEs);
                            panel2.revalidate();
                            panel2.repaint();
                            cl.show(panelG, "PyMES");
                            cg.show(panelF, "PyMES");
                            break;
                        }

                    case "Hipotecarios":
                        if (level < 0.6) {
                            JOptionPane.showMessageDialog(null, "No tiene el historial necesario.");
                            break;
                        } else {
                            JLabel cuota3 = new JLabel();
                            cuota3.setText("Coutas:");
                            cuota3.setBounds(123, 70, 200, 20);
                            panel3.add(cuota3);

                            JTextField field5 = new JTextField();
                            field5.setBounds(165, 70, 150, 25);
                            panel3.add(field5);

                            JLabel tipo2 = new JLabel();
                            tipo2.setText("Cotizar Casa:");
                            tipo2.setBounds(87, 20, 200, 20);
                            panel3.add(tipo2);

                            JTextField field6 = new JTextField();
                            field6.setBounds(165, 20, 150, 25);
                            panel3.add(field6);

                            JButton cotizar3 = new JButton("Cotizar");
                            cotizar3.setBounds(190, 45, 90, 25);
                            panel3.add(cotizar3);
                            cotizar3.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    double numes = Double.parseDouble(field6.getText().trim());
                                    if (numes < 100000) {
                                        aux = 0.20;
                                    } else if (numes > 10001 && numes < 199999) {
                                        aux = 0.25;
                                    } else {
                                        aux = 0.36;
                                    }

                                    String cuotasInput = JOptionPane.showInputDialog(
                                            null,
                                            "¿Cuántas cuotas deseas?",
                                            "Número de cuotas",
                                            JOptionPane.QUESTION_MESSAGE
                                    );

                                    if (cuotasInput != null && !cuotasInput.isEmpty()) {
                                        try {
                                            int cuotas = Integer.parseInt(cuotasInput);
                                            double cuotasx = cuotas - 12;
                                            double gg = aux + 0.05 + 0.02 * cuotasx;

                                            JPanel cuotasPanel = new JPanel();
                                            cuotasPanel.setLayout(new BoxLayout(cuotasPanel, BoxLayout.Y_AXIS));
                                            double aux = numes / cuotas;

                                            for (int i = 1; i <= cuotas; i++) {
                                                double inte = numes * gg;
                                                double cuot = aux + inte;
                                                numes -= aux;
                                                cuotasPanel.add(new JLabel("Cuota " + i + ": $" + String.format("%.2f", cuot)));
                                            }

                                            JOptionPane.showMessageDialog(
                                                    null,
                                                    cuotasPanel,
                                                    "Desglose de cuotas",
                                                    JOptionPane.INFORMATION_MESSAGE
                                            );
                                        } catch (NumberFormatException e) {
                                            JOptionPane.showMessageDialog(
                                                    null,
                                                    "Por favor, ingrese un número válido.",
                                                    "Error",
                                                    JOptionPane.ERROR_MESSAGE
                                            );
                                        }

                                    }
                                }
                            });

                            JButton button3 = new JButton("Finalizar");
                            button3.setBounds(190, 95, 90, 25);
                            panel3.add(button3);
                            button3.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    setStatementC(id, Double.parseDouble(field.getText().trim()), 4, aux, 1, Integer.parseInt(field5.getText().trim()));
                                }
                            });

                            JTextArea textAreaHipotecarios = new JTextArea(
                                    "Créditos Hipotecarios:\n"
                                    + "La tasación de la casa corresponderá a la zona de la misma y historial del cliente.\n"
                                    + "Tiene un cálculo de un 25% del total de la propiedad más 5% del mínimo (12 cuotas)\n"
                                    + "con un aumento de 2% por cada mes extra.\n"
                                    + "Podes hacer la cotización en esta misma página."
                            );
                            textAreaHipotecarios.setBounds(10, 10, 200, 200); // Posición y tamaño
                            textAreaHipotecarios.setLineWrap(true);
                            textAreaHipotecarios.setWrapStyleWord(true);
                            textAreaHipotecarios.setEditable(false);
                            textAreaHipotecarios.setBackground(new Color(0, 0, 0, 0));
                            textAreaHipotecarios.setBorder(null);

                            panel6.add(textAreaHipotecarios);

                            panel3.revalidate();
                            panel3.repaint();
                            cl.show(panelG, "Hipotecarios");
                            cg.show(panelF, "Hipotecarios");
                            break;
                        }
                }
            }
        }
        );

        frame.setVisible(true);
    }//GEN-LAST:event_creditosButtonActionPerformed
    private void setCuentaPyme(int id, double monto) {
        Connection cn = c.getConnection();
        String caracteresPermitidos = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+";

        int longitudContrasena = 12;
        SecureRandom random = new SecureRandom();
        StringBuilder contrasena = new StringBuilder();

        for (int i = 0; i < longitudContrasena; i++) {

            int indiceAleatorio = random.nextInt(caracteresPermitidos.length());
            contrasena.append(caracteresPermitidos.charAt(indiceAleatorio));
        }

        String contra = contrasena.toString();
        java.util.Date utilDate = new java.util.Date(); // Fecha actual
        java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
        try {
            PreparedStatement pst = cn.prepareStatement("insert into user_data values(?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setString(1, id + "CuentaPyme");
            pst.setString(2, id + "CuentaPyme");
            pst.setString(3, id + "CuentaPyme");
            pst.setString(4, contra);
            pst.setString(5, "0");
            pst.setInt(6, 2);
            pst.setDouble(7, monto);
            pst.setDouble(8, 0.0);
            pst.setInt(9, 0);
            pst.setInt(10, 0);
            pst.setInt(11, 2);
            pst.setDate(12, sqlDate);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Cuenta creada. La contraseña es: " + contra);
            pst.close();
            cn.close();
        } catch (Exception e) {
            System.out.println("Error en setCuentaPyme: " + e);
        }
    }

    private void setStatementC(int user_id, double monto, int credito, double porcentaje, int meses, int meses_totales) {
        Connection cn = c.getConnection();
        java.util.Date utilDate = new java.util.Date();
        java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
        try {

            PreparedStatement pst = cn.prepareStatement("insert into creditos_data values(?,?,?,?,?,?,?,?,?)");
            pst.setInt(1, user_id);
            pst.setDouble(2, monto);
            pst.setInt(3, credito);
            pst.setDouble(4, porcentaje);
            pst.setDate(5, sqlDate);
            pst.setInt(6, meses);
            pst.setInt(7, meses_totales);
            pst.setString(8, "0");
            pst.setInt(9, 0);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Se realizo con exito");
            pst.close();
            cn.close();
        } catch (Exception e) {
            System.out.println("Error en setStatement: " + e);
            JOptionPane.showMessageDialog(null, "Error en setStatement");

        }
    }

    private void setStatementS(int user_id, int seguro_id, double monto, double porcentaje, String name) {
        Connection cn = c.getConnection();
        java.util.Date utilDate = new java.util.Date();
        java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
        try {

            PreparedStatement pst = cn.prepareStatement("insert into seguros_data values(?,?,?,?,?,?,?,?)");
            pst.setInt(1, user_id);
            pst.setInt(2, seguro_id);
            pst.setDouble(3, monto);
            pst.setDouble(4, porcentaje);
            pst.setString(5, "0");
            pst.setString(6, name);
            pst.setDate(7, sqlDate);
            pst.setInt(8, 0);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Se realizo con exito");
            pst.close();
            cn.close();
        } catch (Exception e) {
            System.out.println("Error en setStatement: " + e);
            JOptionPane.showMessageDialog(null, "Error en setStatement");

        }
    }


    private void verHistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verHistButtonActionPerformed
        if (crediticioField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar id de usuario");
            return;
        }
        Connection cn = c.getConnection();
        int aux = Integer.parseInt(crediticioField.getText().trim());
        try {
            PreparedStatement pst = cn.prepareStatement("select * from crediticio_data where user_id = ?");
            pst.setInt(1, aux);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                levelLabel.setText(rs.getDouble("historial") + "");
            } else {
                CallableStatement stmt = cn.prepareCall("{CALL CalcularNivelCredito(?)}");
                stmt.setInt(1, aux);
                ResultSet r = stmt.executeQuery();
                if (r.next()) {
                    double nivelCredito = r.getDouble("NivelCreditoCalculado");
                    PreparedStatement temp = cn.prepareStatement("insert into crediticio_data values(?,?)");
                    temp.setInt(1, aux);
                    temp.setDouble(2, nivelCredito);
                    temp.executeUpdate();
                    temp.close();
                }
                verHistButton.doClick();
            }

            cn.close();
            pst.close();
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(ayudas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_verHistButtonActionPerformed

    private void tarjetasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tarjetasButtonActionPerformed
        int id;
        try {
            id = Integer.parseInt(crediticioField.getText().trim());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Debe ingresar id de usuario");
            return;
        }
        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setResizable(false);
        frame.setSize(500, 425);

        JPanel panel = new JPanel();
        panel.setBounds(0, 0, 600, 450);
        panel.setLayout(null);
        panel.setBackground(new Color(102, 102, 102));
        frame.add(panel);

        JPanel paneld = new JPanel();
        paneld.setBounds(0, 0, 600, 200);
        paneld.setBackground(new Color(102, 102, 102));
        paneld.setLayout(null);

        panel.add(paneld);

        JLabel labeld = new JLabel("Tarjeta de Debito:");
        labeld.setBounds(10, 10, 120, 10);
        labeld.setForeground(new Color(255, 255, 255));
        paneld.add(labeld);

        JLabel labeld2 = new JLabel("No activo");
        labeld2.setBounds(107, 5, 200, 20);
        labeld2.setForeground(new Color(255, 255, 255));
        paneld.add(labeld2);

        JPanel panelc = new JPanel();
        panelc.setBounds(0, 200, 600, 250);
        panelc.setBackground(new Color(102, 102, 102));
        panelc.setLayout(null);

        panel.add(panelc);

        JLabel labelc = new JLabel("Tarjeta de Credito:");
        labelc.setBounds(10, 10, 120, 10);
        labelc.setForeground(new Color(255, 255, 255));
        panelc.add(labelc);

        JLabel labelc2 = new JLabel("No activo");
        labelc2.setBounds(112, 5, 200, 20);
        labelc2.setForeground(new Color(255, 255, 255));

        panelc.add(labelc2);

        JButton button = new JButton("Ver Movimientos");
        button.setBounds(10, 30, 120, 30);

        paneld.add(button);

        JButton button2 = new JButton("Adquirir Tarjeta");
        button2.setBounds(10, 70, 120, 30);
        paneld.add(button2);

        JButton buttondbaja = new JButton("Baja de Tarjeta");
        buttondbaja.setBounds(10, 110, 120, 30);

        JButton buttonc = new JButton("Ver Movimientos");
        buttonc.setBounds(10, 30, 120, 30);

        panelc.add(buttonc);

        JButton buttonc2 = new JButton("Adquirir Tarjeta");
        buttonc2.setBounds(10, 70, 120, 30);
        panelc.add(buttonc2);

        JButton buttonc3 = new JButton("Actualizar Tarjeta");
        buttonc3.setBounds(10, 110, 150, 30);
        buttonc3.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String tarjet = JOptionPane.showInputDialog(null,
                        "Ingrese la tarjeta:",
                        "Ingreso de tarjeta",
                        JOptionPane.QUESTION_MESSAGE);
                int tarjeta = Integer.parseInt(tarjet);
                if (tarjeta > 4) {
                    JOptionPane.showMessageDialog(null, "Numero incorrecto");
                    return;
                }
                Connection cn = c.getConnection();
                try {
                    PreparedStatement ps = cn.prepareStatement("select * from user_data where id = ?");
                    ps.setInt(1, id);
                    ResultSet rs = ps.executeQuery();
                    if (rs.next()) {
                        if (rs.getInt("tarjetas") > 2) {
                            PreparedStatement pst = cn.prepareStatement("update user_data set tarjetas = ? where id = ?");
                            pst.setInt(1, tarjeta);
                            pst.setInt(2, id);
                            pst.executeUpdate();
                            JOptionPane.showMessageDialog(null, "Alta realizada!");
                            pst.close();
                        } else {
                            JOptionPane.showMessageDialog(null, "Debe tener tarjeta de debito");
                        }

                    }
                    ps.close();
                    rs.close();
                    cn.close();
                } catch (Exception e) {
                    System.out.println("Error en setAlta: " + e);
                }
            }
        });
        panelc.add(buttonc3);

        JButton buttoncbaja = new JButton("Baja de Tarjeta");
        buttoncbaja.setBounds(10, 150, 120, 30);
        panelc.add(buttoncbaja);

        JTextArea textAreaDebit = new JTextArea(
                "La tarjeta de debito te permitira tener "
                + "una forma de abonar tus gastos de "
                + "manera contactless y de manera virtual "
                + "lo que hace que no tengas que estar "
                + "llevando fajos de billetes o monedas"
                + "en los bolsillos, asi facilitando una "
                + "carga menor en la persona."
        );
        textAreaDebit.setBounds(200, 10, 250, 100); // Posición y tamaño
        textAreaDebit.setLineWrap(true);
        textAreaDebit.setWrapStyleWord(true);
        textAreaDebit.setEditable(false);
        textAreaDebit.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        textAreaDebit.setBackground(new Color(255, 255, 255));
        textAreaDebit.setForeground(new Color(0, 0, 0));
        paneld.add(textAreaDebit);

        JTextArea textAreaCredit = new JTextArea(
                "La tarjeta de credito le proporcionara "
                + "manera de cubrir esos gastos que tienen "
                + "un monto alto y no pueden pagarlo a full "
                + "o mismo crear un historial crediticio "
                + "pagando en tiempo y forma, lo que "
                + "le permitira ingresar a mejores creditos"
                + " futuros."
        );
        textAreaCredit.setBounds(200, 10, 250, 100); // Posición y tamaño
        textAreaCredit.setLineWrap(true);
        textAreaCredit.setWrapStyleWord(true);
        textAreaCredit.setEditable(false);
        textAreaCredit.setBackground(new Color(255, 255, 255));
        textAreaCredit.setForeground(new Color(0, 0, 0));
        textAreaCredit.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        panelc.add(textAreaCredit);

        Connection cn = c.getConnection();
        try {
            PreparedStatement pst = cn.prepareStatement("select user_data.tarjetas, tarjetas_id.name from user_data join tarjetas_id on user_data.tarjetas = tarjetas_id.unique_id where id = ?");
            pst.setInt(1, id);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                tarjeta = rs.getInt("tarjetas");
                if (tarjeta == 0) {
                    buttoncbaja.setEnabled(false);
                    buttondbaja.setEnabled(false);
                    button.setEnabled(false);
                    buttonc.setEnabled(false);
                } else if (tarjeta == 1) {
                    button2.setEnabled(false);
                    buttoncbaja.setEnabled(false);
                    labeld2.setText("Debito BVVA");
                } else {
                    buttonc2.setEnabled(false);
                    button2.setEnabled(false);
                    labeld2.setText("Debito BVVA");
                    labelc2.setText(rs.getString("name"));
                }

            }
            cn.close();
            pst.close();
            rs.close();
        } catch (Exception e) {
            System.out.println("Error en Tarjetas: " + e);
        }

        button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getMetaData(id, 1);
            }
        });

        buttonc.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getMetaData(id, tarjeta);
            }
        });

        buttoncbaja.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setBaja(id, tarjeta);
            }
        });

        buttonc2.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAlta(id, 2, labelc2);
            }
        });

        buttondbaja.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setBaja(id, 1);
            }
        });
        paneld.add(buttondbaja);

        button2.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAlta(id, 1, labeld2);//////////////////////////////////////
            }
        });

        frame.setVisible(true);

    }//GEN-LAST:event_tarjetasButtonActionPerformed

    private void cotizacionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cotizacionButtonActionPerformed
        int id;
        try {
            id = Integer.parseInt(crediticioField.getText().trim());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Debe ingresar id de usuario");
            return;
        }
        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setResizable(false);
        frame.setSize(600, 250);

        JPanel panel = new JPanel();
        panel.setBounds(0, 0, 600, 600);
        panel.setLayout(null);
        frame.add(panel);

        String[] options = {"Joyas", "Domestico", "Otros"};
        JComboBox<String> comboBox = new JComboBox<>(options);
        comboBox.setBounds(165, 10, 150, 20);
        panel.add(comboBox);

        JLabel label1 = new JLabel("Selecione el tipo a asegurar:");
        label1.setBounds(10, 10, 200, 20);
        panel.add(label1);

        JLabel label2 = new JLabel("Monto:");
        label2.setBounds(125, 50, 200, 20);
        panel.add(label2);

        JTextField field = new JTextField();
        field.setBounds(165, 50, 150, 25);
        panel.add(field);

        JPanel panelG = new JPanel();
        panelG.setBounds(0, 70, 350, 530);
        panelG.setLayout(new CardLayout());

        JPanel panel1 = new JPanel();

        panel1.setLayout(null);

        JPanel panel2 = new JPanel();

        panel2.setLayout(null);

        JPanel panel3 = new JPanel();

        panel3.setLayout(null);

        panelG.add(panel1, "Joyas");
        panelG.add(panel2, "Inmuebles");
        panelG.add(panel3, "Otros");
        panel.add(panelG);

        JPanel panelF = new JPanel();
        panelF.setBounds(350, 0, 250, 600);
        panelF.setLayout(new CardLayout());

        JPanel panel4 = new JPanel();
        panel4.setLayout(null);

        JPanel panel5 = new JPanel();

        panel5.setLayout(null);

        JPanel panel6 = new JPanel();

        panel6.setLayout(null);
        panelF.add(panel4, "Joyas");
        panelF.add(panel5, "Inmuebles");
        panelF.add(panel6, "Otros");

        panel.add(panelF);

        CardLayout cl = (CardLayout) (panelG.getLayout());
        CardLayout cg = (CardLayout) (panelF.getLayout());
        double level = Double.parseDouble(levelLabel.getText());
        //  int id = Integer.parseInt(crediticioField.getText().trim());
        JLabel cuotas = new JLabel();
        JTextField fieldC = new JTextField();
        cuotas.setText("Cantidad:");
        cuotas.setBounds(103, 30, 200, 20);
        panel1.add(cuotas);
        fieldC.setBounds(165, 30, 150, 25);
        panel1.add(fieldC);
        JButton button = new JButton("Finalizar");
        button.setBounds(190, 55, 90, 25);
        panel1.add(button);
        button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setStatementS(id, 3, Double.parseDouble(field.getText().trim()), 12, "Joyas");
            }
        });
        JButton cotizar = new JButton("Cotizar");
        cotizar.setBounds(190, 6, 90, 25);
        panel1.add(cotizar);
        cotizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                double numes = Double.parseDouble(field.getText().trim());
                double aux = numes * (.12);
                JPanel cuotasPanel = new JPanel();
                cuotasPanel.setLayout(new BoxLayout(cuotasPanel, BoxLayout.Y_AXIS));

                cuotasPanel.add(new JLabel("Cuota: $" + String.format("%.2f", aux)));

                JOptionPane.showMessageDialog(
                        null,
                        cuotasPanel,
                        "Desglose de cuotas",
                        JOptionPane.INFORMATION_MESSAGE
                );

            }
        });
        panel1.revalidate();
        panel1.repaint();
        JTextArea textArea = new JTextArea(
                "En nuestro banco, sabemos lo importante que son tus joyas, no solo por su valor económico, "
                + "sino por el significado emocional que representan. Nuestro Seguro para Joyas "
                + "está diseñado para brindarte tranquilidad, cubriendo tus piezas "
                + "más preciadas ante imprevistos como robos, pérdidas o daños accidentales."
        );
        textArea.setBounds(10, 10, 200, 200);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        textArea.setEditable(false);
        textArea.setBorder(null);
        textArea.setOpaque(false);
        textArea.setBackground(new Color(0, 0, 0, 0));
        panel4.add(textArea);
        panel4.revalidate();
        panel4.repaint();

        cl.show(panelG, "Joyas");
        cg.show(panelF, "Joyas");
        comboBox.addItemListener(e -> {

            if (e.getStateChange() == ItemEvent.SELECTED) {
                String selectedOption = (String) comboBox.getSelectedItem();
                switch (selectedOption) {

                    case "Joyas":
                        System.out.println("Joyas");
                        if (level < 0.01) {
                            JOptionPane.showMessageDialog(null, "No tiene el historial necesario.");
                            break;
                        } else {

                            cl.show(panelG, "Joyas");
                            cg.show(panelF, "Joyas");
                            break;
                        }
                    case "Domestico":
                        if (level < 0.3) {
                            JOptionPane.showMessageDialog(null, "No tiene el historial necesario.");
                            break;
                        } else {

                            JLabel cuota = new JLabel();
                            cuota.setText("Cantidad:");
                            cuota.setBounds(113, 70, 200, 20);
                            panel2.add(cuota);

                            JTextField field3 = new JTextField();
                            field3.setBounds(165, 70, 150, 25);
                            panel2.add(field3);

                            JLabel tipo = new JLabel();
                            tipo.setText("Tipo de Objeto:");
                            tipo.setBounds(67, 20, 200, 20);
                            panel2.add(tipo);

                            String[] tipos = {"Muebles", "Casa", "Tecnologia", "Otros"};
                            JComboBox<String> comboBox2 = new JComboBox<>(tipos);
                            comboBox2.setBounds(165, 20, 150, 25);
                            panel2.add(comboBox2);

                            comboBox2.addItemListener(er -> {

                                if (er.getStateChange() == ItemEvent.SELECTED) {
                                    String selectedOption2 = (String) comboBox2.getSelectedItem();
                                    switch (selectedOption2) {
                                        case ("Muebles"):
                                            aux = .12;
                                            break;
                                        case ("Casa"):
                                            aux = .17;
                                            break;
                                        case ("Tecnologia"):
                                            aux = .05;
                                            break;
                                        case ("Otros"):
                                            aux = .07;
                                            break;
                                    }
                                }

                            });
                            JButton cotizar2 = new JButton("Cotizar");
                            cotizar2.setBounds(190, 45, 90, 25);
                            panel2.add(cotizar2);
                            cotizar2.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    double numes = Double.parseDouble(field.getText().trim());
                                    double auxe = numes * aux;
                                    JPanel cuotasPanel = new JPanel();
                                    cuotasPanel.setLayout(new BoxLayout(cuotasPanel, BoxLayout.Y_AXIS));

                                    cuotasPanel.add(new JLabel("Cuota: $" + String.format("%.2f", auxe)));

                                    JOptionPane.showMessageDialog(
                                            null,
                                            cuotasPanel,
                                            "Desglose de cuotas",
                                            JOptionPane.INFORMATION_MESSAGE
                                    );

                                }
                            });
                            JButton button2 = new JButton("Finalizar");
                            button2.setBounds(190, 95, 90, 25);
                            panel2.add(button2);
                            button2.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    setStatementS(id, 3, Double.parseDouble(field.getText().trim()), aux, "Domestico");
                                }
                            });

                            JTextArea textAreaDom = new JTextArea(
                                    "En nuestro banco, entendemos que tus domesticos es uno de tus bienes más valiosos. "
                                    + "Ya sea tu hogar, una propiedad en alquiler o un inmueble comercial, nuestro Seguro para "
                                    + "Inmuebles  y otros te brinda tranquilidad y respaldo ante imprevistos como incendios, robos, "
                                    + "desastres naturales y otros eventos inesperados."
                            );
                            textAreaDom.setBounds(10, 10, 200, 180); // Posición y tamaño
                            textAreaDom.setLineWrap(true);
                            textAreaDom.setWrapStyleWord(true);
                            textAreaDom.setEditable(false);
                            textAreaDom.setBackground(new Color(0, 0, 0, 0));
                            textAreaDom.setBorder(null);
                            panel5.add(textAreaDom);
                            panel2.revalidate();
                            panel2.repaint();
                            cl.show(panelG, "Inmuebles");
                            cg.show(panelF, "Inmuebles");
                            break;
                        }

                    case "Otros":

                        if (level < 0.2) {
                            JOptionPane.showMessageDialog(null, "No tiene el historial necesario.");
                            break;
                        } else {
                            JLabel cuota3 = new JLabel();
                            cuota3.setText("Cantidad:");
                            cuota3.setBounds(113, 40, 200, 20);
                            panel3.add(cuota3);

                            JTextField field5 = new JTextField();
                            field5.setBounds(165, 40, 150, 25);
                            panel3.add(field5);

                            JButton cotizar3 = new JButton("Cotizar");
                            cotizar3.setBounds(190, 15, 90, 25);
                            panel3.add(cotizar3);
                            cotizar3.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    double numes = Double.parseDouble(field.getText().trim());
                                    if (numes < 100000) {
                                        aux = 0.1;
                                    } else if (numes > 10001 && numes < 199999) {
                                        aux = 0.12;
                                    } else {
                                        aux = 0.17;
                                    }

                                    double cuotasx = numes * aux;

                                    JPanel cuotasPanel = new JPanel();
                                    cuotasPanel.setLayout(new BoxLayout(cuotasPanel, BoxLayout.Y_AXIS));

                                    cuotasPanel.add(new JLabel("Cuota: $" + String.format("%.2f", cuotasx)));

                                    JOptionPane.showMessageDialog(
                                            null,
                                            cuotasPanel,
                                            "Desglose de cuotas",
                                            JOptionPane.INFORMATION_MESSAGE
                                    );

                                }

                            });

                            JButton button3 = new JButton("Finalizar");
                            button3.setBounds(190, 65, 90, 25);
                            panel3.add(button3);
                            button3.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    setStatementS(id, 3, Double.parseDouble(field.getText().trim()), aux, "Joyas");

                                }
                            });

                            JTextArea textAreaDom = new JTextArea(
                                    "En nuestro banco, sabemos que tus objetos personales son mucho más que cosas materiales: son recuerdos, "
                                    + "herramientas de trabajo y elementos esenciales para tu día a día. Nuestro Seguro para "
                                    + "Objetos Personales está diseñado para cubrir tus pertenencias más preciadas contra robos, daños, "
                                    + "pérdidas y otros imprevistos, brindándote seguridad y confianza."
                            );
                            textAreaDom.setBounds(10, 10, 200, 175);
                            textAreaDom.setLineWrap(true);
                            textAreaDom.setWrapStyleWord(true);
                            textAreaDom.setEditable(false);
                            textAreaDom.setBackground(new Color(0, 0, 0, 0));
                            textAreaDom.setBorder(null);
                            panel6.add(textAreaDom);

                            panel3.revalidate();
                            panel3.repaint();
                            cl.show(panelG, "Otros");
                            cg.show(panelF, "Otros");
                            break;
                        }
                }
            }
        });
        frame.setVisible(true);
    }//GEN-LAST:event_cotizacionButtonActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int filaSeleccionada = jTable1.getSelectedRow();

        if (filaSeleccionada != -1) {
            String usuario = jTable1.getValueAt(filaSeleccionada, 0).toString();
            String tipo = jTable1.getValueAt(filaSeleccionada, 1).toString();
            String id = jTable1.getValueAt(filaSeleccionada, 2).toString();

            // Mostrar datos (puedes personalizar esto según lo que necesites)
            int respuesta = JOptionPane.showConfirmDialog(
                    this,
                    "¿Estás seguro de que quieres marcar esto como resuelto?\n\n"
                    + "ID: " + id + "\n"
                    + "Tipo: " + tipo + "\n"
                    + "Usuario: " + usuario,
                    "Confirmar acción",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);

            if (respuesta == JOptionPane.YES_OPTION) {
                Connection cn = c.getConnection();
                try {
                    PreparedStatement pst = cn.prepareStatement("update ayuda_data set status = ? where unique_id = ?");
                    pst.setString(1, "Completado");
                    pst.setInt(2, Integer.parseInt(id));
                    pst.executeUpdate();
                    buscarButton.doClick();
                    pst.close();
                    cn.close();
                    JOptionPane.showMessageDialog(null, "Se realizo con exito");
                } catch (Exception e) {
                    System.out.println("Error en: " + e);
                }
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked
    public enum Tablas {
        transfer_data(1),
        tarjeta_data(2),
        seguros_data(3),
        pagos_data(4),
        inversiones_data(5),
        creditos_data(6),
        cobros_data(7),
        ayuda_data(8);

        private final int id_tabla;
        private static final Map<Integer, Tablas> map = new HashMap<>();

        // Constructor
        Tablas(int id_tabla) {
            this.id_tabla = id_tabla;
        }

        static {
            for (Tablas dia : Tablas.values()) {
                map.put(dia.id_tabla, dia);
            }
        }

        public static Tablas fromNumero(int numero) {
            return map.get(numero);
        }
    }

    private void getMetaData(int id, int tarjeta) {
        Connection cn = c.getConnection();
        try {
            PreparedStatement pst = cn.prepareStatement("select * from tarjeta_data where user_id = ? and unique_id = ?");
            pst.setInt(1, id);
            pst.setInt(2, tarjeta);
            DefaultTableModel tableModel = new DefaultTableModel();
            ResultSet rs = pst.executeQuery();
            ResultSetMetaData data = rs.getMetaData();
            int aux = data.getColumnCount();
            for (int i = 1; i <= aux; i++) {
                tableModel.addColumn(data.getColumnName(i));
            }
            if (rs.next()) {
                do {
                    Object[] row = new Object[aux];
                    for (int i = 1; i <= aux; i++) {
                        row[i - 1] = rs.getObject(i);
                    }
                    tableModel.addRow(row);
                } while (rs.next());

                JFrame nuevoFrame = new JFrame("Datos de SQL");
                nuevoFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                nuevoFrame.setSize(800, 600);

                JTable table = new JTable(tableModel);
                JScrollPane scrollPane = new JScrollPane(table);
                nuevoFrame.add(scrollPane);

                nuevoFrame.setVisible(true);
                cn.close();
                pst.close();
                rs.close();
            }

        } catch (Exception e) {

        }
    }

    private void setBaja(int id, int tarjeta) {
        Connection cn = c.getConnection();
        int tarjetaux = (tarjeta > 1) ? 1 : 0;
        int respuesta = JOptionPane.showConfirmDialog(
                null,
                "¿Estás seguro de que quieres dar de baja esta tarjeta?",
                "Confirmar Baja",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );
        if (respuesta == JOptionPane.YES_OPTION) {
            try {
                PreparedStatement pst = cn.prepareStatement("select * from tarjeta_data where user_id = ? and tarjetas_id = ? and pagado = 0");
                pst.setInt(1, id);
                pst.setInt(2, tarjeta);
                ResultSet rs = pst.executeQuery();
                if (rs.next()) {
                    JOptionPane.showMessageDialog(null, "Tiene pagos pendientes");
                } else {
                    PreparedStatement ps = cn.prepareStatement("update user_data set tarjetas = ? where id = ?");
                    ps.setInt(1, tarjetaux);
                    ps.setInt(2, id);
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Baja realizada!");
                    ps.close();
                }
                pst.close();
                rs.close();
                cn.close();
            } catch (Exception e) {
                System.out.println("Error en setBaja: " + e);
            }
        }
    }

    private void setAlta(int id, int tarjeta, JLabel label) {
        int respuesta = JOptionPane.showConfirmDialog(
                null,
                "¿Estás seguro de que quieres dar de alta esta tarjeta?",
                "Confirmar Alta",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );
        if (respuesta == JOptionPane.YES_OPTION) {

            Connection cn = c.getConnection();
            try {
                PreparedStatement ps = cn.prepareStatement("select * from user_data where id = ?");
                ps.setInt(1, id);
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    if (tarjeta == 1 || (tarjeta == 2 && rs.getInt("tarjetas") == 1)) {
                        PreparedStatement pst = cn.prepareStatement("update user_data set tarjetas = ? where id = ?");
                        pst.setInt(1, tarjeta);
                        pst.setInt(2, id);
                        pst.executeUpdate();
                        JOptionPane.showMessageDialog(null, "Alta realizada!");
                        if (tarjeta == 1) {
                            label.setText("Bvva Debito");
                        } else {
                            label.setText("Bvva Credito");
                        }
                        pst.close();
                    } else {

                        JOptionPane.showMessageDialog(null, "Debe tener tarjeta de debito");
                    }

                }
                rs.close();
                ps.close();
                cn.close();
            } catch (Exception e) {
                System.out.println("Error en setAlta: " + e);
            }
        }
    }

    private Conection c = new Conection();
    private double aux;
    private int tarjeta;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bajaButton;
    private javax.swing.JTextField bajaField;
    private javax.swing.JButton buscarButton;
    private javax.swing.JButton buscarTablaButton;
    private javax.swing.JButton cotizacionButton;
    private javax.swing.JTextField crediticioField;
    private javax.swing.JButton creditosButton;
    private javax.swing.JTextField idField;
    private javax.swing.JTextField idTableField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JLabel levelLabel;
    private javax.swing.JLabel levelLabelT;
    private javax.swing.JTextField mailField;
    private javax.swing.JButton modificarButton;
    private javax.swing.JTextField nombreField;
    private javax.swing.JTextField tablaIdField;
    private javax.swing.JButton tarjetasButton;
    private javax.swing.JTextField userField;
    private javax.swing.JButton verHistButton;
    // End of variables declaration//GEN-END:variables
}
